<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Designated Initializer For Objective-C]]></title>
      <url>/2018/03/16/Designated-Initializer-For-Objective-C/</url>
      <content type="html"><![CDATA[<p>在阅读 <code>AFNetworking</code> 源码时，发现每个类都有一个初始化方法，都有跟着一个 <code>NS_DESIGNATED_INITIALIZER</code> 宏。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> Initializes an instance of a network reachability manager from the specified reachability object.</div><div class="line"></div><div class="line"> @param reachability The reachability object to monitor.</div><div class="line"></div><div class="line"> @return An initialized network reachability manager, actively monitoring the specified reachability.</div><div class="line"> */</div><div class="line">- (<span class="keyword">instancetype</span>)initWithReachability:(<span class="built_in">SCNetworkReachabilityRef</span>)reachability <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</div></pre></td></tr></table></figure>
<p>接着发现 <code>NSObject</code>、<code>UIView</code>、<code>UIViewController</code> 也都有，才发现自己之前缺少对源码的留意，格物致知，于是决定一探究竟。</p>
<a id="more"></a>
<h2 id="NS-DESIGNATED-INITIALIZER"><a href="#NS-DESIGNATED-INITIALIZER" class="headerlink" title="NS_DESIGNATED_INITIALIZER"></a>NS_DESIGNATED_INITIALIZER</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#ifndef NS_DESIGNATED_INITIALIZER</span></div><div class="line"><span class="meta">#if __has_attribute(objc_designated_initializer)</span></div><div class="line"><span class="meta">#define NS_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))</span></div><div class="line"><span class="meta">#else</span></div><div class="line"><span class="meta">#define NS_DESIGNATED_INITIALIZER</span></div><div class="line"><span class="meta">#endif</span></div><div class="line"><span class="meta">#endif</span></div></pre></td></tr></table></figure>
<p><code>NS_DESIGNATED_INITIALIZER</code> 的宏定义中<code>__has_attribute是Clang</code> 的一个用于检测当前编译器是否支持某一特性的一个宏，对你没有听错，<code>__has_attribute</code> 也是一个宏。详细信息见: <a href="http://clang.llvm.org/docs/AttributeReference.html#type-safety-checking" target="_blank" rel="external">Type Safety Checking</a></p>
<p>通过上面的定义，我们可以看到<code>NS_DESIGNATED_INITIALIZER</code>其实是给初始化方法声明的后面加上了一个编译器可见的标记，不要小看这个标记，他可以在编译时就帮我们找出一些潜在的问题。</p>
<p>通过它可以让我们充分发挥编译器的特性（编译时检查，语法错误后并给出<code>warning</code>），进而帮我们找出初始化过程中可能存在的漏洞，增加代码的健壮性，写出更规范的代码。</p>
<h3 id="NSObject-中的-NS-DESIGNATED-INITIALIZER"><a href="#NSObject-中的-NS-DESIGNATED-INITIALIZER" class="headerlink" title="NSObject 中的 NS_DESIGNATED_INITIALIZER"></a>NSObject 中的 NS_DESIGNATED_INITIALIZER</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)init</div><div class="line"><span class="meta">#if NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER</span></div><div class="line">    <span class="built_in">NS_DESIGNATED_INITIALIZER</span></div><div class="line"><span class="meta">#endif</span></div><div class="line">    ;</div></pre></td></tr></table></figure>
<p>可以看出，如果子类没有指定 <code>NS_DESIGNATED_INITIALIZER</code>，则默认把<code>init</code>方法作为<code>NS_DESIGNATED_INITIALIZER</code>，如果子类有<code>NS_DESIGNATED_INITIALIZER</code>，那么<code>init</code>将只是一个普通的初始化方法。从<code>Objective-C</code>的继承链我们可以看出，除了如<code>NSProxy</code>之外的类，几乎都是派生自<code>NSObject</code>，所有<code>init</code>才成为了所有类的标配初始化方法。</p>
<h3 id="AFNetworkReachabilityManager-中的-NS-DESIGNATED-INITIALIZER"><a href="#AFNetworkReachabilityManager-中的-NS-DESIGNATED-INITIALIZER" class="headerlink" title="AFNetworkReachabilityManager 中的 NS_DESIGNATED_INITIALIZER"></a>AFNetworkReachabilityManager 中的 NS_DESIGNATED_INITIALIZER</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// AFNetworkReachabilityManager.h</div><div class="line">// 提供了三个构造方法</div><div class="line"></div><div class="line">+ (instancetype)managerForDomain:(NSString *)domain;</div><div class="line">+ (instancetype)managerForAddress:(const void *)address;</div><div class="line">- (instancetype)initWithReachability:(SCNetworkReachabilityRef)reachability NS_DESIGNATED_INITIALIZER;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AFNetworkReachabilityManager.m</span></div><div class="line"><span class="comment">// 构造方法的具体实现</span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithReachability:(<span class="built_in">SCNetworkReachabilityRef</span>)reachability &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.networkReachability = <span class="built_in">CFBridgingRelease</span>(reachability);</div><div class="line">    <span class="keyword">self</span>.networkReachabilityStatus = AFNetworkReachabilityStatusUnknown;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init <span class="built_in">NS_UNAVAILABLE</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#ifndef __clang_analyzer__</span></div><div class="line">+ (<span class="keyword">instancetype</span>)managerForDomain:(<span class="built_in">NSString</span> *)domain &#123;</div><div class="line">    <span class="built_in">SCNetworkReachabilityRef</span> reachability = <span class="built_in">SCNetworkReachabilityCreateWithName</span>(kCFAllocatorDefault, [domain UTF8String]);</div><div class="line"></div><div class="line">    AFNetworkReachabilityManager *manager = [[<span class="keyword">self</span> alloc] initWithReachability:reachability];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> manager;</div><div class="line">&#125;</div><div class="line"><span class="meta">#endif</span></div><div class="line"></div><div class="line"><span class="meta">#ifndef __clang_analyzer__</span></div><div class="line">+ (<span class="keyword">instancetype</span>)managerForAddress:(<span class="keyword">const</span> <span class="keyword">void</span> *)address &#123;</div><div class="line">    <span class="built_in">SCNetworkReachabilityRef</span> reachability = <span class="built_in">SCNetworkReachabilityCreateWithAddress</span>(kCFAllocatorDefault, (<span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *)address);</div><div class="line">    AFNetworkReachabilityManager *manager = [[<span class="keyword">self</span> alloc] initWithReachability:reachability];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> manager;</div><div class="line">&#125;</div><div class="line"><span class="meta">#endif</span></div></pre></td></tr></table></figure>
<p>可以看出<code>-(instancetype)managerForDomain:</code> 和 <code>-(instancetype)managerForAddress:</code> 中都调用了 <code>-(instancetype)initWithReachability:</code> 来做初始化。</p>
<p>而 <code>AFNetworkReachabilityManager</code> 是继承与 <code>NSObject</code> 的，那么父类的 <code>-init</code> 将不会成为指定初始化方法。这里还把 <code>-init</code> 方法设置成 <code>NS_UNAVAILABLE</code> ，调用者在 <code>-init</code> 方法时编译器会直接抛出 <code>waring</code> ，从而起到限制的的作用。</p>
<h2 id="开发者文档中的描述"><a href="#开发者文档中的描述" class="headerlink" title="开发者文档中的描述"></a>开发者文档中的描述</h2><blockquote>
<p>In Objective-C, object initialization is based on the notion of a <em>designated initializer</em>, an initializer method that is responsible for calling one of its superclass’s initializers and then initializing its own instance variables. Initializers that are not designated initializers are known as <em>convenience initializers</em>. Convenience initializers typically delegate to another initializer—eventually terminating the chain at a designated initializer—rather than performing initialization themselves.</p>
<p>The designated initializer pattern helps ensure that inherited initializers properly initialize all instance variables. A subclass that needs to perform nontrivial initialization should override all of its superclass’s designated initializers, but it does not need to override the convenience initializers. For more information about initializers, see <a href="https://developer.apple.com/library/content/documentation/General/Conceptual/CocoaEncyclopedia/Initialization/Initialization.html#//apple_ref/doc/uid/TP40010810-CH6" target="_blank" rel="external">Object Initialization</a>.</p>
<p>To clarify the distinction between designated and designated initializers clear, you can add the <code>NS_DESIGNATED_INITIALIZER</code> macro to any method in the <code>init</code> family, denoting it a designated initializer. Using this macro introduces a few restrictions:</p>
<ul>
<li>The implementation of a designated initializer must chain to a superclass <code>init</code> method (with <code>[super init...]</code>) that is a designated initializer for the superclass.</li>
<li>The implementation of a convenience initializer (an initializer not marked as a designated initializer within a class that has at least one initializer marked as a designated initializer) must delegate to another initializer (with <code>[self init...]</code>).</li>
<li>If a class provides one or more designated initializers, it must implement all of the designated initializers of its superclass.</li>
</ul>
<p>If any of these restrictions are violated, you receive warnings from the compiler.</p>
<p>If you use the <code>NS_DESIGNATED_INITIALIZER</code> macro in your class, you need to mark all of your designated initializers with this macro. All other initializers will be considered to be convenience initializers.</p>
</blockquote>
<p><img src="https://ws1.sinaimg.cn/large/8258d55bgy1fpenxodkptj211v0i0tau.jpg" alt="Multiple initializers"></p>
<h2 id="NS-DESIGNATED-INITIALIZER-使用方法"><a href="#NS-DESIGNATED-INITIALIZER-使用方法" class="headerlink" title="NS_DESIGNATED_INITIALIZER 使用方法"></a>NS_DESIGNATED_INITIALIZER 使用方法</h2><p>关于指定构造器和便利构造器可以看<a href="https://www.2cto.com/kf/201603/491713.html" target="_blank" rel="external">这篇文章</a>,构造器也就是文中的方法。</p>
<p>NS_DESIGNATED_INITIALIZER 使用方法：</p>
<ul>
<li>子类如果有指定初始化方法，那么指定初始化方法实现时必须调用它的直接父类的指定初始化方法。</li>
<li>如果子类有指定初始化方法，那么便利初始化方法必须调用<strong>自己</strong>的其它初始化方法(包括指定初始化方法以及其他的便利初始化方法)，不能调用 <code>super</code> 的初始化方法。</li>
<li>如果子类提供了指定初始化方法，那么一定要实现所有父类的指定初始化方法。</li>
</ul>
<p>如果不遵守以上几条，编译器将会报 <code>warning</code>，由此可以规范化初始化方法，确保子类是调用的父类指定初始化方法，且不会出现循环的调用。</p>
<p><img src="https://ws1.sinaimg.cn/large/8258d55bgy1fpepjroqa1j20cc0bd74t.jpg" alt=""></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>Apple 开发者文档： <a href="https://developer.apple.com/library/mac/releasenotes/ObjectiveC/ModernizationObjC/AdoptingModernObjective-C/AdoptingModernObjective-C.html#//apple_ref/doc/uid/TP40014150-CH1-SW8" target="_blank" rel="external">Object Initialization</a>, <a href="https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/MultipleInitializers.html" target="_blank" rel="external">Multiple initializers</a></p>
<p><a href="https://link.jianshu.com/?t=http://www.cnblogs.com/smileEvday/p/designated_initializer.html" target="_blank" rel="external">iOS: 聊聊 Designated Initializer（指定初始化函数）</a></p>
<p><a href="https://link.jianshu.com/?t=http://blog.jobbole.com/65762/" target="_blank" rel="external">正确编写Designated Initializer的几个原则</a></p>
]]></content>
      
        <categories>
            
            <category> Initializer </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Objective-C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cocoapods系列（二）公有篇]]></title>
      <url>/2018/03/15/Cocoapods%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89%E5%85%AC%E6%9C%89%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>根据存放代码的仓库不同，对于公开给所有人的开源称为公有库，而对于公司内的开源称为私有库，本文将详细描述如何在GitHub上利用CocoaPods开源公有代码库。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>需要在GitHub上创建一个Public仓库，常规操作不再过多描述，需要注意的是需要在Add a license中选择MIT License（软件授权条款）。</p>
<p>将创建完的仓库clone到工作目录，使用命令行工具创建一个podspec文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod spec create 库名</div></pre></td></tr></table></figure>
<p>这个文件是告诉<code>Cocoapods</code>你这个库的一些基本信息，包括你的版本号、获取的地址、那些文件是希望被包含进来的等一些信息。</p>
<a id="more"></a>
<p>编辑 podspec文件，这里是用vim打开的，命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim RYJBlankDataSet.podspec</div></pre></td></tr></table></figure>
<p>创建之后会自动生成一个模板，里面会有详细的注释，我们只需要按需要修改这个文件即可，下边这个是测试的时候我编辑的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new do |s|</div><div class="line"></div><div class="line">  # ―――  Spec Metadata  ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class="line">  #</div><div class="line">  #  These will help people to find your library, and whilst it</div><div class="line">  #  can feel like a chore to fill in it&apos;s definitely to your advantage. The</div><div class="line">  #  summary should be tweet-length, and the description more in depth.</div><div class="line">  #</div><div class="line"></div><div class="line">  s.name         = &quot;RYJBlankDataSet&quot;</div><div class="line">  s.version      = &quot;0.0.2&quot;</div><div class="line">  s.summary      = &quot;Easy to make blank page.&quot;</div><div class="line"></div><div class="line">  # This description is used to generate tags and improve search results.</div><div class="line">  #   * Think: What does it do? Why did you write it? What is the focus?</div><div class="line">  #   * Try to keep it short, snappy and to the point.</div><div class="line">  #   * Write the description between the DESC delimiters below.</div><div class="line">  #   * Finally, don&apos;t worry about the indent, CocoaPods strips it!</div><div class="line">  s.description  = &quot;Make blank page implementation simpler and more flexible.&quot;</div><div class="line"></div><div class="line">  s.homepage     = &quot;https://github.com/developRen/RYJBlankDataSet&quot;</div><div class="line">  # s.screenshots  = &quot;www.example.com/screenshots_1.gif&quot;, &quot;www.example.com/screenshots_2.gif&quot;</div><div class="line"></div><div class="line"></div><div class="line">  # ―――  Spec License  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class="line">  #</div><div class="line">  #  Licensing your code is important. See http://choosealicense.com for more info.</div><div class="line">  #  CocoaPods will detect a license file if there is a named LICENSE*</div><div class="line">  #  Popular ones are &apos;MIT&apos;, &apos;BSD&apos; and &apos;Apache License, Version 2.0&apos;.</div><div class="line">  #</div><div class="line"></div><div class="line">  s.license      = &quot;MIT&quot;</div><div class="line">  # s.license      = &#123; :type =&gt; &quot;MIT&quot;, :file =&gt; &quot;FILE_LICENSE&quot; &#125;</div><div class="line"></div><div class="line"></div><div class="line">  # ――― Author Metadata  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class="line">  #</div><div class="line">  #  Specify the authors of the library, with email addresses. Email addresses</div><div class="line">  #  of the authors are extracted from the SCM log. E.g. $ git log. CocoaPods also</div><div class="line">  #  accepts just a name if you&apos;d rather not provide an email address.</div><div class="line">  #</div><div class="line">  #  Specify a social_media_url where others can refer to, for example a twitter</div><div class="line">  #  profile URL.</div><div class="line">  #</div><div class="line"></div><div class="line">  s.author             = &#123; &quot;YiJie Ren&quot; =&gt; &quot;jie_ios@163.com&quot; &#125;</div><div class="line">  # Or just: s.author    = &quot;RYJ&quot;</div><div class="line">  # s.authors            = &#123; &quot;RYJ&quot; =&gt; &quot;&quot; &#125;</div><div class="line">  # s.social_media_url   = &quot;http://twitter.com/RYJ&quot;</div><div class="line"></div><div class="line">  # ――― Platform Specifics ――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class="line">  #</div><div class="line">  #  If this Pod runs only on iOS or OS X, then specify the platform and</div><div class="line">  #  the deployment target. You can optionally include the target after the platform.</div><div class="line">  #</div><div class="line"></div><div class="line">  s.platform     = :ios, &quot;8.0&quot;</div><div class="line">  # s.platform     = :ios, &quot;5.0&quot;</div><div class="line"></div><div class="line">  #  When using multiple platforms</div><div class="line">  # s.ios.deployment_target = &quot;5.0&quot;</div><div class="line">  # s.osx.deployment_target = &quot;10.7&quot;</div><div class="line">  # s.watchos.deployment_target = &quot;2.0&quot;</div><div class="line">  # s.tvos.deployment_target = &quot;9.0&quot;</div><div class="line"></div><div class="line"></div><div class="line">  # ――― Source Location ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class="line">  #</div><div class="line">  #  Specify the location from where the source should be retrieved.</div><div class="line">  #  Supports git, hg, bzr, svn and HTTP.</div><div class="line">  #</div><div class="line"></div><div class="line">  s.source       = &#123; :git =&gt; &quot;https://github.com/developRen/RYJBlankDataSet&quot;, :tag =&gt; &quot;#&#123;s.version&#125;&quot; &#125;</div><div class="line"></div><div class="line"></div><div class="line">  # ――― Source Code ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class="line">  #</div><div class="line">  #  CocoaPods is smart about how it includes source code. For source files</div><div class="line">  #  giving a folder will include any swift, h, m, mm, c &amp; cpp files.</div><div class="line">  #  For header files it will include any header in the folder.</div><div class="line">  #  Not including the public_header_files will make all headers public.</div><div class="line">  #</div><div class="line"></div><div class="line">  s.source_files  = &quot;RYJBlankView/RYJBlankDataSet&quot;, &quot;RYJBlankView/RYJBlankDataSet/**/*.&#123;h,m&#125;&quot;</div><div class="line">  s.exclude_files = &quot;Classes/Exclude&quot;</div><div class="line"></div><div class="line">  # s.public_header_files = &quot;Classes/**/*.h&quot;</div><div class="line"></div><div class="line"></div><div class="line">  # ――― Resources ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class="line">  #</div><div class="line">  #  A list of resources included with the Pod. These are copied into the</div><div class="line">  #  target bundle with a build phase script. Anything else will be cleaned.</div><div class="line">  #  You can preserve files from being cleaned, please don&apos;t preserve</div><div class="line">  #  non-essential files like tests, examples and documentation.</div><div class="line">  #</div><div class="line"></div><div class="line">  # s.resource  = &quot;icon.png&quot;</div><div class="line">  # s.resources = &quot;Resources/*.png&quot;</div><div class="line"></div><div class="line">  # s.preserve_paths = &quot;FilesToSave&quot;, &quot;MoreFilesToSave&quot;</div><div class="line"></div><div class="line"></div><div class="line">  # ――― Project Linking ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class="line">  #</div><div class="line">  #  Link your library with frameworks, or libraries. Libraries do not include</div><div class="line">  #  the lib prefix of their name.</div><div class="line">  #</div><div class="line"></div><div class="line">  s.framework  = &quot;UIKit&quot;</div><div class="line">  # s.frameworks = &quot;SomeFramework&quot;, &quot;AnotherFramework&quot;</div><div class="line"></div><div class="line">  # s.library   = &quot;iconv&quot;</div><div class="line">  # s.libraries = &quot;iconv&quot;, &quot;xml2&quot;</div><div class="line"></div><div class="line"></div><div class="line">  # ――― Project Settings ――――――――――――――――――――――――――――――――――――――――――――――――――――――――― #</div><div class="line">  #</div><div class="line">  #  If your library depends on compiler flags you can set them in the xcconfig hash</div><div class="line">  #  where they will only apply to your library. If you depend on other Podspecs</div><div class="line">  #  you can include multiple dependencies to ensure it works.</div><div class="line"></div><div class="line">  # s.requires_arc = true</div><div class="line"></div><div class="line">  # s.xcconfig = &#123; &quot;HEADER_SEARCH_PATHS&quot; =&gt; &quot;$(SDKROOT)/usr/include/libxml2&quot; &#125;</div><div class="line">  # s.dependency &quot;JSONKit&quot;, &quot;~&gt; 1.4&quot;</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure>
<h2 id="发布公有库"><a href="#发布公有库" class="headerlink" title="发布公有库"></a>发布公有库</h2><p>创建tag，并推送到github,依次执行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -m &quot;1.2&quot;</div><div class="line">$ git tag 1.2</div><div class="line">$ git push --tags</div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p>验证podspec文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod spec lint RYJBlankDataSet.podspec</div></pre></td></tr></table></figure>
<p>如果验证不通过，会有详细的ERROR和WARING提示，根据提示依次解决，然后重新来一遍。<br><strong>注意：</strong>在重新开始之前，我们要删除远程库的tag和本地的tag，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git tag -d 1.2                   //删除本地tag</div><div class="line">$ git push origin :refs/tags/1.2  // 删除远程库tag</div></pre></td></tr></table></figure>
<p>验证通过后，提交到CocoaPods。命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod trunk push RYJBlankDataSet.podspec</div></pre></td></tr></table></figure>
<p>如果是第一次提交，需要先执行这个命令，邮箱验证通过后再提交到CocoaPods：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod trunk register 这里写邮箱 &apos;这里起个名字&apos; --description=&apos; 这里写描述&apos;</div></pre></td></tr></table></figure>
<h2 id="使用公有库"><a href="#使用公有库" class="headerlink" title="使用公有库"></a>使用公有库</h2><p>提交完成后，就可以通过cocopods查找该公有库了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod search RYJBlankDataSet</div></pre></td></tr></table></figure>
<p>具体使用可以看作者前一篇文章<a href="http://renyijie.top/2018/02/03/Cocoapods系列（一）使用篇/" target="_blank" rel="external">Cocoapods系列（一）使用篇</a></p>
<h2 id="迭代更新公有库"><a href="#迭代更新公有库" class="headerlink" title="迭代更新公有库"></a>迭代更新公有库</h2><p>首先更新 pod 中的文件, 及 podspec, 在示例程序中无错误后, podspec 中的 version 改为更大的版本号。操作 git:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -m &apos;描述&apos;</div><div class="line">$ git push</div><div class="line">$ it tag -a &apos;版本号&apos; -m &apos;描述&apos;</div><div class="line">$ git push --tags</div></pre></td></tr></table></figure>
<p>再将 podspec 利用上面 repo push 命令推到私有源, podfile 修改对应版本号, pod update 对应pod, 完成了版本的升级. 值得注意的是 git 的 tag 不要删除, 否则会出现一些缓存问题.</p>
]]></content>
      
        <categories>
            
            <category> 工具集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cocoapods </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cocoapods系列（一）使用篇]]></title>
      <url>/2018/02/03/Cocoapods%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89%E4%BD%BF%E7%94%A8%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>对于做iOS开发的绝大多数开发者而言，<code>Cocoapods</code> 并不陌生。无论是日常开发，还是编写 <code>Dome</code>，时常用到 <code>Cocoapods</code> 来管理库文件的依赖。</p>
<p>笔者之前也只是停留在用 <code>Cocoapods</code> 导入第三方库而已，由于对于组件化学习的深入和发布自己的代码库的需求，于是有了该系列的文章，来梳理 <code>Cocoapods</code> 使用过程中的一些细节。</p>
<p>网络上也有大量关于 <code>Cocoapods</code> 安装、替换镜像的文章，在此也不再累赘描述。</p>
<p>本文将会着重讲解<code>Podfile文件</code>以及<code>pod命令行</code>。</p>
<blockquote>
<p>关于<a href="http://renyijie.top/2017/07/09/CocoaPod工作原理/" target="_blank" rel="external">Cocoapods的工作原理</a>可见笔者另一篇博文。</p>
</blockquote>
<a id="more"></a>
<h2 id="简单的使用"><a href="#简单的使用" class="headerlink" title="简单的使用"></a>简单的使用</h2><p>就比如我们最常用的<code>AFNetworking</code>来说的话，只需在<code>项目名.xcodeproj</code>的目录下创建一个<code>Podfile</code>的文件，然后打开文件，填入一下内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">target 'target name' do</div><div class="line">use_frameworks!</div><div class="line">pod 'AFNetworking'</div><div class="line">end</div></pre></td></tr></table></figure>
<p>然后保存，并且打开一个命令行，跳转到<code>Podfile</code>的目录直接运行<code>pod install</code>即可。 当然，你会看到你的目录下回多了目录<code>Pods</code>, 文件<code>Podfile.lock</code>以及文件<code>项目名.xcworkspace</code>。以后你打开项目就再也不是<code>xcodeproj</code>的文件了，而是<code>wxcworkspcace</code>的文件。然后你打开项目就会看到除了你的项目外，下面多了一个<code>Pods</code>的一个项目。</p>
<p>就此，对于你项目需要依赖的<code>AFNetworking</code>的依赖了。非常简单对吧？ 如果你只是想简单的使用<code>Cocoapods</code>,估计到这一步就完全够了。</p>
<h2 id="Podfile-lock文件"><a href="#Podfile-lock文件" class="headerlink" title="Podfile.lock文件"></a>Podfile.lock文件</h2><p>在执行完<code>pod install</code>之后，会生成一个<code>Podfile.lock</code>文件。这个文件看起来跟我们关系不大，实际上绝对不应该忽略它。</p>
<p>该文件用于保存已经安装的<code>Pods</code>依赖库的版本，通过<code>CocoaPods</code>安装了<code>AFNetworking</code>依赖库以后对应的<code>Podfile.lock</code>文件内容为：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">PODS:</div><div class="line">  - AFNetworking (<span class="number">3.1</span><span class="number">.0</span>):</div><div class="line">    - AFNetworking/<span class="built_in">NSURLSession</span> (= <span class="number">3.1</span><span class="number">.0</span>)</div><div class="line">    - AFNetworking/Reachability (= <span class="number">3.1</span><span class="number">.0</span>)</div><div class="line">    - AFNetworking/Security (= <span class="number">3.1</span><span class="number">.0</span>)</div><div class="line">    - AFNetworking/Serialization (= <span class="number">3.1</span><span class="number">.0</span>)</div><div class="line">    - AFNetworking/<span class="built_in">UIKit</span> (= <span class="number">3.1</span><span class="number">.0</span>)</div><div class="line">  - AFNetworking/<span class="built_in">NSURLSession</span> (<span class="number">3.1</span><span class="number">.0</span>):</div><div class="line">    - AFNetworking/Reachability</div><div class="line">    - AFNetworking/Security</div><div class="line">    - AFNetworking/Serialization</div><div class="line">  - AFNetworking/Reachability (<span class="number">3.1</span><span class="number">.0</span>)</div><div class="line">  - AFNetworking/Security (<span class="number">3.1</span><span class="number">.0</span>)</div><div class="line">  - AFNetworking/Serialization (<span class="number">3.1</span><span class="number">.0</span>)</div><div class="line">  - AFNetworking/<span class="built_in">UIKit</span> (<span class="number">3.1</span><span class="number">.0</span>):</div><div class="line">    - AFNetworking/<span class="built_in">NSURLSession</span></div><div class="line"></div><div class="line">DEPENDENCIES:</div><div class="line">  - AFNetworking</div><div class="line"></div><div class="line">SPEC CHECKSUMS:</div><div class="line">  AFNetworking: <span class="number">5e0</span>e199f73d8626b11e79750991f5d173d1f8b67</div><div class="line"></div><div class="line">PODFILE CHECKSUM: <span class="number">023</span>cc304232df5f2f4cbc2ab8d90949d95b41a34</div><div class="line"></div><div class="line">COCOAPODS: <span class="number">1.3</span><span class="number">.1</span></div></pre></td></tr></table></figure>
<blockquote>
<p><code>Podfile.lock</code>文件最大得用处在于多人开发。</p>
</blockquote>
<p>对于没有在<code>Podfile文件</code>中指定<code>Pods</code>依赖库版本的写法，如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod 'AFNetworking'</div></pre></td></tr></table></figure>
<p>该句话用于获取当前<code>AFNetworking</code>这个<code>Pods</code>依赖库的最新版本。</p>
<p>当团队中的某个人执行完<code>pod install</code>命令后，生成的<code>Podfile.lock文件</code>就记录下了当时最新<code>Pods</code>依赖库的版本，这时团队中的其它人从<code>Git</code>拉取下来这份包含<code>Podfile.lock文件</code>的工程以后，再去执行pod install命令时，获取下来的<code>Pods</code>依赖库的版本就和最开始用户获取到的版本一致。如果没有<code>Podfile.lock</code>文件，后续所有用户执行<code>pod install</code>命令都会获取最新版本的<code>AFNetworking</code>，这就有可能造成同一个团队使用的依赖库版本不一致。</p>
<blockquote>
<p>这对团队协作来说绝对是个灾难！</p>
</blockquote>
<p>但是当执行<code>pod update</code>命令时，将会忽略<code>Podfile.lock文件</code>把<code>AFNetworking</code>更新至最新版本，那么仍有可能导致同一个团队使用的依赖库版本不一致。</p>
<p>若是既想保持依赖库保持最新版本，又想团队中依赖库版本保持一致，在这种情况下，笔者认为最优的方案：</p>
<ul>
<li>更改<code>Podfile文件</code>，使其指向最新版本的<code>AFNetworking</code>依赖库<code>pod &#39;AFNetworking&#39;, &#39;~&gt; 3.1.0&#39;</code>;</li>
<li>执行<code>pod update</code>命令；</li>
</ul>
<h2 id="Podfile文件"><a href="#Podfile文件" class="headerlink" title="Podfile文件"></a>Podfile文件</h2><h3 id="pod"><a href="#pod" class="headerlink" title="pod"></a>pod</h3><p>首先先来讲讲最核心的<code>pod</code>关键字吧。关于pod的使用在上面可以看得出来是<code>pod &#39;框架名&#39; 参数</code>。 当然对于前面两个<code>pod &#39;框架名&#39;</code>是固定的，没上面好说，参数的话，这里主要讲参数。</p>
<h4 id="参数一：-版本号"><a href="#参数一：-版本号" class="headerlink" title="参数一： 版本号"></a>参数一： 版本号</h4><p>版本号可以是大于、小于、等于等。当然具体的可以是’&gt; 3.7’, ‘&gt;= 3.7’, ‘&lt; 3.7’, ‘3.7’以及’~&gt; 3.7’。关于普通的就没什么好说了，最后一个<code>~&gt;</code>指的是正对最后一位来说。如使用’~&gt; 3.7.4’,意味着’&gt;= 3.7.4’并且’&lt; 3.8.0’的意思。</p>
<h4 id="参数二：地址"><a href="#参数二：地址" class="headerlink" title="参数二：地址"></a>参数二：地址</h4><p><code>Cocoapods</code>可以指定某一个git的目录或者是本地的目录。有的时候我们希望一直用某一个版本最新的版本，即使没有打版本的话，我们可以直接后面接上:<code>git =&gt; &#39;https://github.com/gowalla/AFNetworking.git&#39;</code>。 </p>
<p>当然除了这种情况外，还有可能是如果是我们自己开发的私有库，并且在开发阶段的情况下，可能就希望开发模式进行引用，则可以使用path参数：<code>:path =&gt; &#39;~/Documents/AFNetworking&#39;</code>。</p>
<blockquote>
<p>具体使用可见笔者Cocoapods系列另一篇博文<a href="">《Cocoapods系列（三）私有篇》</a>。</p>
</blockquote>
<h4 id="参数三：tag、branche、commit"><a href="#参数三：tag、branche、commit" class="headerlink" title="参数三：tag、branche、commit"></a>参数三：tag、branche、commit</h4><p>有的时候我们希望引用有一个<code>tag</code>，<code>branch</code>或者是<code>comit</code>的内容的话可以使用这个参数，分别用<code>:branch =&gt; &#39;branch名&#39;</code>、<code>:tag =&gt; &#39;tag名&#39;</code>、<code>:commit =&gt; &#39;提交号&#39;</code>。</p>
<h4 id="参数四：inhibit-warnings-gt-true"><a href="#参数四：inhibit-warnings-gt-true" class="headerlink" title="参数四：inhibit_warnings =&gt; true"></a>参数四：inhibit_warnings =&gt; true</h4><p>对于强迫症患者而言，一个项目中很多<code>warnings</code>是非常难以忍受的。自然这个参数是用来避免那些第三方框架中带来的<code>warnings</code>。用法<code>:inhibit_warnings =&gt; true</code>。</p>
<h3 id="platform"><a href="#platform" class="headerlink" title="platform"></a>platform</h3><p>这个参数是只依赖的库希望在哪个平台被编译。 一句话带过吧,直接使用<code>platform :ios, &#39;9.0&#39;</code>。需要注意的是如果在<code>platform</code>后面没有跟东西的话，默认是在<code>iOS4.3</code>,<code>OSX 10.6</code>,<code>tvOS 9.0</code>以及<code>watchOS 2.0</code>的情况下编译的。很多库都是从6.0或者7.0才开始支持的，肯能会造成编译不通过。</p>
<h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><p>这个是指定具体的配置是适配在哪个<code>target</code>，这里的<code>target</code>值得就是<code>Xcode</code>中的<code>target</code>。如果对于一些项目中你的不同<code>target</code>引用的框架不同的话，可以采用这个进行区分。</p>
<p>比如创建项目时勾选了<code>Tests</code>和<code>UITests</code>,那么必须声明是那个<code>target</code>导入的依赖库。</p>
<h3 id="use-frameworks"><a href="#use-frameworks" class="headerlink" title="use_frameworks!"></a>use_frameworks!</h3><p>这个指明编译成动态库，而不是静态库。</p>
<p><a href="https://segmentfault.com/a/1190000007076865" target="_blank" rel="external">Podfile中的 use_frameworks!</a>一文中详细的描述了<code>use_frameworks</code>用法。</p>
<h3 id="source"><a href="#source" class="headerlink" title="source"></a>source</h3><p>这个参数是指<code>Cocoapods</code>从哪些仓库(<code>Spec</code>)中获得框架的源代码，如果在结合使用开源库以及自己私有库的情况下，这个参数还是非常有意义的。博主之前在用到自己私有库的情况下就不懂这点，最后查了好久资料才知道的。只需要在<code>Podfile</code>文件开头列出你需要引用库的所有仓库地址即可。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source 'https://github.com/artsy/Specs.git'  </div><div class="line">source 'https://192.168.0.90:8888/MySepcs/Specs.git'</div></pre></td></tr></table></figure>
<h3 id="Podfile-Demo"><a href="#Podfile-Demo" class="headerlink" title="Podfile Demo"></a>Podfile Demo</h3><p>对于<code>Podfile</code>常用几个关键字拿出来说了一下，如果还有更深入不懂的情况下，可以查看<a href="https://guides.cocoapods.org/syntax/podfile.html#podfile" target="_blank" rel="external">Cocoapods Guide</a>。 最后给一个官方的<code>Demo</code>吧。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># open source</div><div class="line">source 'https://github.com/CocoaPods/Specs.git'</div><div class="line"></div><div class="line"># my work</div><div class="line">source 'https://github.com/Artsy/Specs.git'</div><div class="line"></div><div class="line">target 'App' do</div><div class="line"></div><div class="line">  pod 'Artsy+UIColors'</div><div class="line">  pod 'Artsy+UIButtons'</div><div class="line"></div><div class="line">  pod 'FLKAutoLayout'</div><div class="line">  pod 'ISO8601DateFormatter', '0.7'</div><div class="line">  pod 'AFNetworking', '~&gt; 2.0'</div><div class="line"></div><div class="line">  target 'AppTests' do</div><div class="line">    pod 'FBSnapshotTestCase'</div><div class="line">    pod 'Quick'</div><div class="line">    pod 'Nimble'</div><div class="line">  end</div><div class="line">end</div></pre></td></tr></table></figure>
<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><p>在使用<code>Cocoapods</code>的过程中，我们可能要更新或者是安装一个新的第三方框架。自然这里就避免不了要用<code>pod install</code> 和 <code>pod update</code>这两个命令了。</p>
<p>对于这两个命令来说，一个是在有新的第三方框架引入是运行，另一个是纯粹为了更新本地的第三框架。 对于二者的命令来说其参数都是大同小异的，这里大概讲解一下。</p>
<h3 id="参数–no-repo-update"><a href="#参数–no-repo-update" class="headerlink" title="参数–no-repo-update"></a>参数–no-repo-update</h3><p>这个参数应该是大家最常用的参数之一，其主要的作用是用于在执行<code>pod install</code>和<code>pod update</code>两条命令是而执行的<code>pod repo update</code>的操作。而<code>pod repo update</code>则是跟新本地已有的第三框框架。对于大多数情况下，我们只希望跟新当前项目的，并且这个操作执行的时间都是相对比较长，所以在执行这两条命令是，大多数人都添加了这个参数。</p>
<h3 id="参数–verbose-和-–silent"><a href="#参数–verbose-和-–silent" class="headerlink" title="参数–verbose 和 –silent"></a>参数–verbose 和 –silent</h3><p>这两个参数是用来控制<code>pod</code>命令的,而有些人不希望看到输出的情况下可以选择<code>--silent</code>。而对于在执行这两条命令的情况下如果出错了，则可能添加<code>--verbose</code>的参数能看到具体的出错信息。<code>--verbose</code>则是用来输出这两条命令执行过程中所包含的所有信息。对于大多数的<code>Cocoapods</code>的命令行来说都带有着两个参数。</p>
<p>其他的细节就不具体说了，大家可以通过<code>help</code>命令来进行查看详情。</p>
<h3 id="常用命令行集合"><a href="#常用命令行集合" class="headerlink" title="常用命令行集合"></a>常用命令行集合</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  创建默认的 Podfile  </span></div><div class="line">$ pod init  </div><div class="line">      </div><div class="line"><span class="comment">//  第一次使用安装框架  </span></div><div class="line">$ pod install  </div><div class="line">      </div><div class="line"><span class="comment">//  安装框架，不更新本地索引，速度快  </span></div><div class="line">$ pod install --no-repo-update  </div><div class="line">         </div><div class="line"><span class="comment">//  今后升级、添加、删除框架，或者框架不好用都使用这个命令  </span></div><div class="line">$ pod update  </div><div class="line">      </div><div class="line"><span class="comment">//  更新框架，不更新本地索引，速度快  </span></div><div class="line">$ pod update --no-repo-update  </div><div class="line">      </div><div class="line"><span class="comment">//  搜索框架  </span></div><div class="line">$ pod search XXX  </div><div class="line">      </div><div class="line"><span class="comment">//  帮助  </span></div><div class="line">$ pod --help </div><div class="line">    </div><div class="line">终端命令: control + C 取消上一次操作;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单来说要使用<code>Cocoapods</code>只需通过三个步骤：安装、写<code>Podfile</code>和<code>pod install</code>命令即可。</p>
<p>但是对于一个有理想的大好青年来说，绝不会止步于此。</p>
<p>本着为人类伟大的开源主义事业奋斗终身的目标，以及加入热火朝天的组件化开发浪潮的目的。</p>
<p><code>Cocoapods系列</code>后续文章将以这两个目标和目的展开，分享如何在一个项目同时使用私有库和开源库，以及如何进行组件化管理。</p>
]]></content>
      
        <categories>
            
            <category> 工具集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cocoapods </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ReactiveCocoa Novice Guide]]></title>
      <url>/2018/01/31/ReactiveCocoa-Novice-Guide/</url>
      <content type="html"><![CDATA[<p>看了很多关于ReactiveCocoa的文章，总结成一句：ReactiveCocoa(RAC) 是来拯救我们的。</p>
<h2 id="RACSignal"><a href="#RACSignal" class="headerlink" title="RACSignal"></a>RACSignal</h2><p><code>RACSignal</code> (信号)就 RAC 来说是构造单元。它代表我们最终将要收到的信息，当你能将未来某时刻收到的消息具体表示出来时, <strong>你可以开始预先(陈述性)运用逻辑并构建你的信息流,</strong>而不是必须等到事件发生(命令式). </p>
<p><strong>信号会为了控制通过应用的信息流而获得所有这些异步方法(委托, 回调 block, 通知, KVO, target/action 事件观察, 等)并将它们统一到一个接口下.</strong>这只是直观理解. 不仅是这些, 因为信息会流过你的应用, 它还提供给你轻松转换/分解/合并/过滤信息的能力.</p>
<a id="more"></a>
<h2 id="那么什么是信号呢"><a href="#那么什么是信号呢" class="headerlink" title="那么什么是信号呢?"></a>那么什么是信号呢?</h2><p>信号是一个发送一连串值的物体. 但是我们这儿的信号啥也不干, 因为它还没有订阅者. 如果有订阅者监听时(已订阅)信号才会发信息. 它将会向那个订阅者发送0或多个载有数值的”next”事件, 后面跟着一个”complete”事件或一个”error”事件. </p>
<h2 id="信号发送的值是从哪获得的"><a href="#信号发送的值是从哪获得的" class="headerlink" title="信号发送的值是从哪获得的?"></a>信号发送的值是从哪获得的?</h2><p>信号是一些等待某事发生的异步代码, 然后把结果值发送给它们的订阅者. 你可以用 <code>RACSignal</code> 的类方法 <code>createSignal:</code> 手动创建信号: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//networkSignal.m</div><div class="line">RACSignal *networkSignal = [RACSignal createSignal:^RACDisposable *(id&lt;RACSubscriber&gt; subscriber)&#123;</div><div class="line">        NetworkOperation *operation = [NetworkOperation getJSONOperationForURL:@&quot;http://someurl&quot;];</div><div class="line">        [operation setCompletionBlockWithSuccess:^(NetworkOperation *theOperation, id *result) &#123;</div><div class="line">            [subscriber sendNext:result];</div><div class="line">            [subscriber sendCompleted];</div><div class="line">        &#125; failure:^(NetworkOperation *theOperation, NSError *error) &#123;</div><div class="line">            [subscriber sendError:error];</div><div class="line">        &#125;];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>我在这用一个具有成功和失败 block (伪造)的网络操作创建了一个信号. (如果我想让信号在被订阅时才让网络请求发生, 还可以用 <code>RACSignal</code> 的类方法 <code>defer</code>. )我在成功的 block 里使用提供的 <code>subscriber</code> 对象调用 <code>sendNext:</code> 和 <code>sendCompleted:</code> 方法, 或在失败的 block 中调用 <code>sendError:</code>. 现在我可以订阅这个信号并将在响应返回时接收到 json 值或是 error. </p>
<ul>
<li>next：是可以为nil的新值, RACStream方法只能在这个值上进行操作运算。</li>
<li>error：表示在Signals完成之前发生了错误，值不会在RACStream类中存储。</li>
<li>completed：表示Signals成功的完成，值不会在RACStream类中存储。</li>
</ul>
<p>幸运的是, RAC 的创造者实际上使用它们自己的库来创建真的事物(捉摸一下), 所以对于我们在日常需要什么, 他们有很强烈的想法. 他们为我们提供了很多机制, 来从我们通常使用的现存的异步模式中拉取信号. 别忘了如果你有一个没有被某个内建信号覆盖到的异步任务, 你可以<em>很容易地</em>用 <code>createSignal:</code> 或类似方法来创建信号. </p>
<p>一个被提供的机制就是 <code>RACObserve()</code> 宏. (如果你不喜欢宏, 你可以简单地看看罩子下面并用稍微多些冗杂的描述. 这也非常好. 在我们得到 <a href="https://github.com/ReactiveCocoa/ReactiveCocoa/pull/1382" target="_blank" rel="external">Swift 版本的替代</a>之前, 这也有<a href="http://blog.scottlogic.com/2014/07/24/mvvm-reactivecocoa-swift.html" target="_blank" rel="external">在 Swift 中使用 RAC</a> 的解决方案. )这个宏是 RAC 中对 KVO 中那些悲惨的 API 的替代. 你只需要传入对象和你想观察的那个对象某属性的 keypath. 给出这些参数后,  <code>RACObserve</code> 会创建一个信号, 一旦它有了订阅者, 它就立刻发送那个属性的当前值, 并在发送那个属性在这之后的任何变化. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RACSignal *usernameValidSignal = RACObserve(self.viewModel,  usernameIsValid);</div></pre></td></tr></table></figure>
<p>这仅是提供用于创建信号的一个工具. 这里有几个立即可用的方式, 来从内置控制流机制中拉取信号: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//signals.m</div><div class="line">RACSignal *controlUpdate = [myButton rac_signalForControlEvents:UIControlEventTouchUpInside];</div><div class="line">    // signals for UIControl events send the control event value (UITextField, UIButton, UISlider, etc)</div><div class="line">    // subscribeNext:^(UIButton *button) &#123; NSLog(@&quot;%@&quot;, button); // UIButton instance &#125;</div><div class="line"> </div><div class="line">RACSignal *textChange = [myTextField rac_textSignal];</div><div class="line">    // some special methods are provided for commonly needed control event values off certain controls</div><div class="line">    // subscribeNext:^(UITextField *textfield) &#123; NSLog(@&quot;%@&quot;, textfield.text); // &quot;Hello!&quot; &#125;</div><div class="line"> </div><div class="line">RACSignal *alertButtonClicked = [myAlertView rac_buttonClickedSignal];</div><div class="line">    // signals for some delegate methods send the delegate params as the value</div><div class="line">    // e.g. UIAlertView, UIActionSheet, UIImagePickerControl, etc</div><div class="line">    // (limited to methods that return void)</div><div class="line">    // subscribeNext:^(NSNumber *buttonIndex) &#123; NSLog(@&quot;%@&quot;, buttonIndex); // &quot;1&quot; &#125;</div><div class="line"> </div><div class="line">RACSignal *viewAppeared = [self rac_signalForSelector:@selector(viewDidAppear:)];</div><div class="line">    // signals for arbitrary selectors that return void, send the method params as the value</div><div class="line">    // works for built in or your own methods</div><div class="line">    // subscribeNext:^(NSNumber *animated) &#123; NSLog(@&quot;viewDidAppear %@&quot;, animated); // &quot;viewDidAppear 1&quot; &#125;</div></pre></td></tr></table></figure>
<h2 id="什么是订阅者"><a href="#什么是订阅者" class="headerlink" title="什么是订阅者?"></a>什么是订阅者?</h2><p>简言之, 订阅者就是一段代码, 它等待信号给它发送一些值, 然后订阅者就能处理这些值了. (它也可以作用于 “complete” 和 “error” 事件. )</p>
<p>这有一个简单的订阅者, 是通过向信号的实例方法 <code>subscribeNext</code> 传入一个 block 来创建的. 我们在这通过 <code>RACObserve()</code> 宏创建信号来观察一个对象上属性的当前值, 并把它赋值给一个内部属性. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (void) viewDidLoad &#123;</div><div class="line">  // . . . </div><div class="line">  // create and get a reference to the signal</div><div class="line">  RACSignal *usernameValidSignal = RACObserve(self.viewModel,  isUsernameValid);</div><div class="line">  // update the local property when this value changes</div><div class="line">  [usernameValidSignal subscribeNext: ^(NSNumber *isValidNumber) &#123;</div><div class="line">          self.usernameIsValid = isValidNumber. boolValue</div><div class="line">      &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意 RAC 只处理对象, 而不处理像 <code>BOOL</code> 这样的原始值. 不过不用担心, RAC 通常会帮你这些转换. </p>
<p>幸运的是 RAC 的创造者也意识到这种绑定行为的普遍必要性, 所以他们提供了另一个宏 <code>RAC()</code>. 与 <code>RACObserve()</code> 相同, 你提供想要与即将到来的值绑定的对象和参数, 在其内部它所做的是创建一个订阅者并更新其属性的值. 我们的例子现在看起来像这样: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void) viewDidLoad &#123;</div><div class="line">    //. . . </div><div class="line">    RAC(self,  usernameIsValid) = RACObserve(self.viewModel,  isUsernameValid);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>考虑下我们的目标, 这么干有点傻啊. 我们不需要将信号发送的值存到属性中(这会创建状态), 我们真正要做的是用从那个值获取到信息来更新 UI. </p>
<h2 id="转换数据流"><a href="#转换数据流" class="headerlink" title="转换数据流"></a>转换数据流</h2><p>现在我们进入 RAC 为我们提供的用于转换数值流的方法. 我们将会利用 <code>RACSignal</code> 的实例方法 <code>map</code>. </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//transformingStreams.m</div><div class="line">- (void) viewDidLoad &#123;</div><div class="line">    //...</div><div class="line">    RACSignal *usernameIsValidSignal = RACObserve(self.viewModel, isUsernameValid);</div><div class="line">    RAC(self.goButton, enabled) = usernameIsValidSignal;</div><div class="line">    RAC(self.goButton, alpha) = [usernameIsValidSignal</div><div class="line">        map:^id(NSNumber *usernameIsValid) &#123;</div><div class="line">            return usernameIsValid.boolValue ? @1.0 : @0.5;</div><div class="line">        &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样现在我们将 view-model 上的 <code>isUsernameValid</code> 发生的变化直接绑定到 <code>goButton</code> 的 <code>enabled</code> 属性上. 酷吧?对 <code>alpha</code>的绑定更酷, 因为我们正在使用 <code>map</code> 方法将值转换成与 <code>alpha</code> 属性相关的值. (注意在这里我们返回的是一个 <code>NSNumber</code> 对象而不是原始float值. 这基本上是唯一的污点: 你需要负责为 RAC 将原始值转化为对象, 因为它不能帮你导出来.</p>
<h2 id="RAC常用宏"><a href="#RAC常用宏" class="headerlink" title="RAC常用宏"></a>RAC常用宏</h2><h3 id="RACObserve-TARGET-KEYPATH"><a href="#RACObserve-TARGET-KEYPATH" class="headerlink" title="RACObserve(TARGET, KEYPATH)"></a>RACObserve(TARGET, KEYPATH)</h3><p>表现形式:RACObserve(self, stringProperty)</p>
<p>KVO的简化版本 相当于对TARGET中KEYPATH的值设置监听，返回一个RACSignal</p>
<h3 id="RAC-TARGET-…"><a href="#RAC-TARGET-…" class="headerlink" title="RAC(TARGET, …)"></a>RAC(TARGET, …)</h3><p>表现形式:RAC(self, stringProperty)  = TextField.rac_textSignal</p>
<p>第一个是需要设置属性值的对象，第二个是属性名</p>
<p>RAC宏允许直接把信号的输出应用到对象的属性上</p>
<p>每次信号产生一个next事件，传递过来的值都会应用到该属性上</p>
<h3 id="RACChannelTo-TARGET-…"><a href="#RACChannelTo-TARGET-…" class="headerlink" title="RACChannelTo(TARGET, …)"></a>RACChannelTo(TARGET, …)</h3><p>RACChannelTo 用于双向绑定</p>
<p>RACChannelTo(self, stringProperty)=RACChannelTo(self.label, text) ;</p>
<p><a href="http://blog.csdn.net/sodaslay/article/details/72794114" target="_blank" rel="external">RAC 双向绑定实现案例</a></p>
<h2 id="RAC基础使用"><a href="#RAC基础使用" class="headerlink" title="RAC基础使用"></a>RAC基础使用</h2><h3 id="subscribeNext"><a href="#subscribeNext" class="headerlink" title="subscribeNext"></a>subscribeNext</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[self.usernameTextField.rac_textSignal </div><div class="line">    subscribeNext:^(id x)&#123;    // 设置订阅 监听TextField</div><div class="line">    NSLog(@&quot;%@&quot;, x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>过滤器,可以添加一些筛选条件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[self.usernameTextField.rac_textSignal</div><div class="line">    filter:^BOOL(NSString* text)&#123;</div><div class="line">    return text.length &gt; 3;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>使用map可以对信号进行转换，一个源信号转换成另外一个新的信号输出。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[[[self.usernameTextField.rac_textSignal</div><div class="line">map:^id(NSString*text)&#123;</div><div class="line">  return @(text.length);</div><div class="line">&#125;]</div><div class="line">filter:^BOOL(NSNumber*length)&#123;</div><div class="line">  return[length integerValue] &gt; 3;</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(id x)&#123;</div><div class="line">  NSLog(@&quot;%@&quot;, x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="聚合-combineLatest-reduce"><a href="#聚合-combineLatest-reduce" class="headerlink" title="聚合(combineLatest: reduce:)"></a>聚合(combineLatest: reduce:)</h3><p>多个信号可以聚合成一个新的信号，这个可以是任何类型的信号.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RAC(self.loginButton, enabled) = [RACSignal combineLatest:@[self.userNameFeild.rac_textSignal,                                                                         														  self.passwordFeild.rac_textSignal]</div><div class="line">                                                                reduce:^(NSString *username, 																	   NSString *password) &#123;</div><div class="line">                                                                    return @0;</div><div class="line">                                                                &#125;];</div></pre></td></tr></table></figure>
<h3 id="分割"><a href="#分割" class="headerlink" title="分割"></a>分割</h3><p>一个信号可以有很多subscriber，也就是作为很多后续步骤的源.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RACSignal *signal = self.usernameTextField.rac_textSignal;</div><div class="line">[signal subscribeNext:^(id x) &#123;</div><div class="line">	NSLog(@&quot;1111&quot;);</div><div class="line">&#125;];</div><div class="line">[signal subscribeNext:^(id x) &#123;</div><div class="line">	NSLog(@&quot;2222&quot;);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="Button的ControlEvents"><a href="#Button的ControlEvents" class="headerlink" title="Button的ControlEvents"></a>Button的ControlEvents</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[self.signInButton</div><div class="line">     rac_signalForControlEvents:UIControlEventTouchUpInside]</div><div class="line">     subscribeNext:^(id x) &#123;</div><div class="line">     NSLog(@&quot;button click&quot;);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h3 id="doNext"><a href="#doNext" class="headerlink" title="doNext"></a>doNext</h3><p>为一个附加操作，在一个next事件发生时执行的逻辑，而该逻辑并不改变事件本身。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[[_login rac_signalForControlEvents:UIControlEventTouchUpInside] </div><div class="line">	doNext:^(id x) &#123;</div><div class="line">	// 点击按钮时执行其他逻辑</div><div class="line">    &#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<h3 id="flattenMap"><a href="#flattenMap" class="headerlink" title="flattenMap"></a>flattenMap</h3><p><a href="http://blog.csdn.net/abc649395594/article/details/46552865" target="_blank" rel="external">信号的FlattenMap与Map</a></p>
<h2 id="避免循环引用"><a href="#避免循环引用" class="headerlink" title="避免循环引用"></a>避免循环引用</h2><p>在ReactiveCocoa中提供了避免循环引用的方法</p>
<ul>
<li>@weakify宏让你创建一个弱引用的影子对象（如果你需要多个弱引用，你可以传入多个变量），</li>
<li>@strongify让你创建一个对之前传入@weakify对象的强引用。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@weakify(self) </div><div class="line">[[self.searchText.rac_textSignal </div><div class="line">map:^id(NSString *text) &#123; </div><div class="line">    return [self isValidSearchText:text] ? </div><div class="line">        [UIColor whiteColor] : [UIColor yellowColor]; </div><div class="line">&#125;] </div><div class="line">subscribeNext:^(UIColor *color) &#123; </div><div class="line">    @strongify(self) </div><div class="line">    self.searchText.backgroundColor = color; </div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h2 id="RAC使用场景"><a href="#RAC使用场景" class="headerlink" title="RAC使用场景"></a>RAC使用场景</h2><h3 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h3><p>待续</p>
<h3 id="实时搜索内容方法"><a href="#实时搜索内容方法" class="headerlink" title="实时搜索内容方法"></a>实时搜索内容方法</h3><p>待续</p>
<h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>待续</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://blog.csdn.net/abc649395594/article/details/45933053" target="_blank" rel="external">ReactiveCocoa框架菜鸟入门</a></p>
<p><a href="https://www.jianshu.com/p/e99cb4310482" target="_blank" rel="external">ReactiveCocoa(RAC)－iOS</a></p>
<p><a href="https://link.jianshu.com/?t=http%3A%2F%2Fwww.cocoachina.com%2Findustry%2F20140115%2F7702.html" target="_blank" rel="external">说说ReactiveCocoa 2</a></p>
<p><a href="https://link.jianshu.com/?t=http%3A%2F%2Fcbsfly.github.io%2Fios%2Frac1" target="_blank" rel="external">学习RAC小记-适合给新手看的RAC用法总结</a></p>
<p><a href="https://link.jianshu.com/?t=https%3A%2F%2Fwww.raywenderlich.com%2F62699%2Freactivecocoa-tutorial-pt1" target="_blank" rel="external">ReactiveCocoa-tutorial-pt1</a></p>
<p><a href="https://link.jianshu.com/?t=https%3A%2F%2Fwww.raywenderlich.com%2F62796%2Freactivecocoa-tutorial-pt2" target="_blank" rel="external">ReactiveCocoa-tutorial-pt2</a></p>
<p><a href="https://link.jianshu.com/?t=http%3A%2F%2Ftwocentstudios.com%2F2014%2F06%2F08%2Fon-mvvm-and-architecture-questions%2F" target="_blank" rel="external">MVVC-RAC</a></p>
<p><a href="https://www.jianshu.com/p/fd407a4ecb8e" target="_blank" rel="external">iOS 基于MVVM + RAC + ViewModel-Based Navigation的微信开发（一）</a></p>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RAC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Realm 小记]]></title>
      <url>/2018/01/26/Realm-%E5%B0%8F%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>记录 Realm 入门级操作。</p>
<h2 id="创建-Realm-数据库文件"><a href="#创建-Realm-数据库文件" class="headerlink" title="创建 Realm 数据库文件"></a>创建 Realm 数据库文件</h2><p>Realm 默认会在 Documents 文件下创建一个default.realm文件。</p>
<p>但是考虑到，用户必须要登录到 Web 后端服务器中，并且需要支持账户快速切换功能的话。 那么可以为每个账户提供一个独立的 Realm 数据库，以此区分不同账户本地数据，并且当前账户所使用的数据库将作为默认 Realm 数据库来使用。（应用场景：1.QQ iOS 客户端 本地文件；2.聊天记录）</p>
<p>Realm 数据库文件创建是懒加载，所以只需要事先配置好目录和文件名即可。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">RLMRealmConfiguration *config = [RLMRealmConfiguration defaultConfiguration];</div><div class="line">    </div><div class="line"><span class="comment">// 使用默认的目录，但是请将文件名替换为用户名</span></div><div class="line">config.fileURL = [[[config.fileURL URLByDeletingLastPathComponent]</div><div class="line">                       URLByAppendingPathComponent:<span class="string">@"测试"</span>]</div><div class="line">                      URLByAppendingPathExtension:<span class="string">@"realm"</span>];</div><div class="line">    </div><div class="line"><span class="comment">// 将该配置设置为默认 Realm 配置</span></div><div class="line">[RLMRealmConfiguration setDefaultConfiguration:config];</div><div class="line">    </div><div class="line"><span class="comment">// Realm 懒加载，所以调用时才会创建</span></div><div class="line"><span class="comment">// ... ...</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="删除-Realm-数据库文件"><a href="#删除-Realm-数据库文件" class="headerlink" title="删除 Realm 数据库文件"></a>删除 Realm 数据库文件</h2><p>在某些情况下，例如清除缓存、或者重置整个数据集之类的操作，那么就可能需要从磁盘中将 Realm 文件给完全删除掉。</p>
<p>尽管不是必须的，不过您应当将 Realm 辅助文件连同 Realm 文件一起删除，以完全清除所有的相关文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">NSFileManager *manager = [NSFileManager defaultManager];</div><div class="line">// 获取当前默认的 Realm 数据库</div><div class="line">RLMRealmConfiguration *config = [RLMRealmConfiguration defaultConfiguration];</div><div class="line">NSArray&lt;NSURL *&gt; *realmFileURLs = @[</div><div class="line">                                    config.fileURL,</div><div class="line">                                    [config.fileURL URLByAppendingPathExtension:@&quot;lock&quot;],</div><div class="line">                                    [config.fileURL URLByAppendingPathExtension:@&quot;note&quot;],</div><div class="line">                                    [config.fileURL URLByAppendingPathExtension:@&quot;management&quot;]</div><div class="line">                                    ];</div><div class="line">for (NSURL *URL in realmFileURLs) &#123;</div><div class="line">    NSError *error = nil;</div><div class="line">    [manager removeItemAtURL:URL error:&amp;error];</div><div class="line">    if (error) &#123;</div><div class="line">        // 错误处理</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h2><p>Realm 支持下述属性类型：<code>BOOL</code>、<code>bool</code>、<code>int</code>、<code>NSInteger</code>、<code>long</code>、<code>long long</code>、<code>float</code>、<code>double</code>、<code>NSString</code>、<code>NSDate</code>、<code>NSData</code> 以及 <a href="https://realm.io/cn/docs/objc/latest/#required-properties" target="_blank" rel="external">被特殊类型标记的</a> <code>NSNumber</code> 。</p>
<p><code>CGFloat</code> 属性被取消了，因为它不具备平台独立性。</p>
<h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><p>重写 <a href="https://realm.io/cn/docs/objc/latest/api/Classes/RLMObject.html#//api/name/primaryKey" target="_blank" rel="external"><code>+primaryKey</code></a> 可以设置模型的主键。声明主键允许对象的查询和更新更加高效，并且会强制要求每个值保持唯一性。一旦将带有主键的对象添加到 Realm 数据库，那么该对象的主键将无法更改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@interface Person : RLMObject</div><div class="line">@property NSInteger id;</div><div class="line">@property NSString *name;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation Person</div><div class="line">+ (NSString *)primaryKey &#123;</div><div class="line">    return @&quot;id&quot;;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<h3 id="属性特性"><a href="#属性特性" class="headerlink" title="属性特性"></a>属性特性</h3><p>Realm 将会忽略诸如 <code>nonatomic</code>、<code>atomic</code>、<code>strong</code>、<code>copy</code>、<code>weak</code> 之类的 Objective-C 属性特性。这些特性对于 Realm 存储机制而言并没有意义。Realm 有自己优化过的存储语义。所以为了避免有人对代码产生误解，我们建议您在编写模型时不要附加任何属性特性。</p>
<h3 id="属性备忘单"><a href="#属性备忘单" class="headerlink" title="属性备忘单"></a>属性备忘单</h3><table>
<thead>
<tr>
<th>类型</th>
<th>非可空值形式</th>
<th>可空值形式</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bool</td>
<td><code>@property BOOL value;</code></td>
<td><code>@property NSNumber&lt;RLMBool&gt; *value;</code></td>
</tr>
<tr>
<td>Int</td>
<td><code>@property int value;</code></td>
<td><code>@property NSNumber&lt;RLMInt&gt; *value;</code></td>
</tr>
<tr>
<td>Float</td>
<td><code>@property float value;</code></td>
<td><code>@property NSNumber&lt;RLMFloat&gt; *value;</code></td>
</tr>
<tr>
<td>Double</td>
<td><code>@property double value;</code></td>
<td><code>@property NSNumber&lt;RLMDouble&gt; *value;</code></td>
</tr>
<tr>
<td>String</td>
<td><code>@property NSString *value;</code></td>
<td><code>@property NSString *value;</code></td>
</tr>
<tr>
<td>Data</td>
<td><code>@property NSData *value;</code></td>
<td><code>@property NSData *value;</code></td>
</tr>
<tr>
<td>Date</td>
<td><code>@property NSDate *value;</code></td>
<td><code>@property NSDate *value;</code></td>
</tr>
<tr>
<td>Object</td>
<td>不存在：必须是可空值</td>
<td><code>@property Object *value;</code></td>
</tr>
<tr>
<td>List</td>
<td><code>@property RLMArray&lt;Class *&gt;&lt;Class&gt; *value;</code></td>
<td>不存在：必须是非可空值</td>
</tr>
<tr>
<td>LinkingObjects</td>
<td><code>@property (readonly) RLMLinkingObjects&lt;Object *&gt; *value;</code></td>
<td>不存在：必须是非可空值</td>
</tr>
</tbody>
</table>
<h2 id="Realm-关系构建"><a href="#Realm-关系构建" class="headerlink" title="Realm 关系构建"></a>Realm 关系构建</h2><p>可以通过 <code>RLMObject</code> 和 <code>RLMArray</code> 属性来关联 <code>RLMObject</code>。<code>RLMArray</code> 的接口与 <code>NSArray</code> 非常类似，并且 <code>RLMArray</code> 当中的对象可以通过索引下标来进行访问。与 <code>NSArray</code> 所不同的是，<code>RLMArray</code> 的类型是固定的，并且 只能存放一种 <code>RLMObject</code> 类型。</p>
<h3 id="多对一关系（包括一对一）"><a href="#多对一关系（包括一对一）" class="headerlink" title="多对一关系（包括一对一）"></a>多对一关系（包括一对一）</h3><p>要配置多对一或者一对一关系，在数据模型当中声明一个 <code>RLMObject</code> 子类类型的属性即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// Dog.h</div><div class="line">@interface Dog : RLMObject</div><div class="line">// ... 其余属性声明</div><div class="line">@property Person *owner;</div><div class="line">@property Father *father;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>操作关系属性的方法与其他属性类似：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Person *jim = [[Person alloc] init];</div><div class="line">Dog    *rex = [[Dog alloc] init];</div><div class="line">Father *frank  = [[Father alloc] init];</div><div class="line">rex.owner = jim;</div><div class="line">rex.father = frank;</div></pre></td></tr></table></figure>
<p>由此将 Person、Father 与 Dog 建立了对应关系。</p>
<p>在使用 <code>RLMObject</code> 属性时，可以使用正常的属性访问语法来访问嵌套属性。例如，<code>rex.owner.address.country</code> 将会遍历对象图，然后自动从 Realm 中检索出每个所需的对象。</p>
<h3 id="多对多关系（包括一对多）"><a href="#多对多关系（包括一对多）" class="headerlink" title="多对多关系（包括一对多）"></a>多对多关系（包括一对多）</h3><p>让我们给 <code>Person</code> 模型添加一个 <code>dogs</code> 属性，从而让其能够与多个 <code>Dog</code> 对象建立关系。首先，我们需要定义 <code>RLMArray&lt;Dog&gt;</code> 类型，也就是在 <code>Dog</code> 模型接口定义的底部使用这条宏：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// Dog.h</div><div class="line">@interface Dog : RLMObject</div><div class="line">// ... property declarations</div><div class="line">@end</div><div class="line"></div><div class="line">RLM_ARRAY_TYPE(Dog) // 定义 RLMArray&lt;Dog&gt; 类型</div></pre></td></tr></table></figure>
<p><code>RLM_ARRAY_TYPE</code> 宏创建了一个协议，从而允许您使用 <code>RLMArray&lt;Dog&gt;</code> 这种语法。如果这条宏没有放置在模型接口定义的底部，那么这个模型类就必须前置声明。</p>
<p>接下来，您就可以声明 <code>RLMArray&lt;Dog&gt;</code> 类型的属性了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Person.h</div><div class="line">@interface Person : RLMObject</div><div class="line">// ...其他属性声明</div><div class="line">@property RLMArray&lt;Dog *&gt;&lt;Dog&gt; *dogs;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>您可以照常对 <code>RLMArray</code> 属性进行访问和赋值：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Jim 是 Rex 和所有名为 &quot;Fido&quot; 狗狗的主人</div><div class="line">RLMResults&lt;Dog *&gt; *someDogs = [Dog objectsWhere:@&quot;name contains &apos;Fido&apos;&quot;];</div><div class="line">[jim.dogs addObjects:someDogs];</div><div class="line">[jim.dogs addObject:rex];</div></pre></td></tr></table></figure>
<h3 id="双向关系"><a href="#双向关系" class="headerlink" title="双向关系"></a>双向关系</h3><p>关系是单向的。以 <code>Person</code> 和 <code>Dog</code> 这两个类为例。如果 <code>Person.dogs</code> 连接了一个 <code>Dog</code> 实例，那么您可以随着该连接从 <code>Person</code> 访问到对应的 <code>Dog</code>，但是是没有办法从 <code>Dog</code> 访问到对应的 <code>Person</code> 对象的。您可以设置一个一对一属性 <code>Dog.owner</code> 从而连接到 <code>Person</code>，但是这些连接实际上仍然是互相独立的。给 <code>Person.dogs</code> 添加一个 <code>Dog</code> 对象并不会将该对象的 <code>Dog.owner</code> 属性设置为对应的 <code>Person</code>。为了解决这个问题，Realm 提供了<em>连接对象</em>属性，从而表示这种双向关系。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@interface Dog : RLMObject</div><div class="line">@property NSString *name;</div><div class="line">@property NSInteger age;</div><div class="line">@property (readonly) RLMLinkingObjects *owners;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation Dog</div><div class="line">+ (NSDictionary *)linkingObjectsProperties &#123;</div><div class="line">    return @&#123;</div><div class="line">        @&quot;owners&quot;: [RLMPropertyDescriptor descriptorWithClass:Person.class propertyName:@&quot;dogs&quot;],</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>借助连接对象属性，可以从特定属性获取连接到指定对象的所有对象。<code>Dog</code> 对象可以拥有一个名为 <code>owners</code> 属性，它包含所有 <code>dogs</code> 属性有该 <code>Dog</code> 对象的 <code>Person</code> 对象。将这个 <code>owners</code> 属性设置为 <code>RLMLinkingObjects</code> 类型，然后重写 <code>+[RLMObject linkingObjectsProperties]</code> 来表示 <code>owners</code> 与 <code>Person</code> 模型对象之间的关系。</p>
<h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>当定义完数据模型之后，就可以实例化 <code>RLMObject</code> 子类了， 然后还可以向 Realm 数据库中添加新的实例。以这个简单的数据模型为例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// Dog 数据模型</div><div class="line">@interface Dog : RLMObject</div><div class="line">@property NSString *name;</div><div class="line">@property NSInteger age;</div><div class="line">@end</div><div class="line"></div><div class="line">// Implementation</div><div class="line">@implementation Dog</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>创建新对象的方法有很多种：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// (1) 创建 Dog 对象，然后设置其属性</div><div class="line">Dog *myDog = [[Dog alloc] init];</div><div class="line">myDog.name = @&quot;Rex&quot;;</div><div class="line">myDog.age = 10;</div><div class="line"></div><div class="line">// (2) 从字典中创建 Dog 对象</div><div class="line">Dog *myOtherDog = [[Dog alloc] initWithValue:@&#123;@&quot;name&quot; : @&quot;Pluto&quot;, @&quot;age&quot; : @3&#125;];</div><div class="line"></div><div class="line">// (3) 从数组中创建 Dog 对象</div><div class="line">Dog *myThirdDog = [[Dog alloc] initWithValue:@[@&quot;Pluto&quot;, @3]];</div></pre></td></tr></table></figure>
<ol>
<li>使用指定初始化函数来创建对象是最直观的方式。<strong>请注意，所有非可空属性必须在对象添加到 Realm 数据库之前完成赋值。</strong></li>
<li>通过恰当的键值，还可以使用字典来创建对象。</li>
<li>最后，<code>RLMObject</code> 的子类还可以使用数组来完成实例化。数组中的值必须与数据模型中对应的属性次序相同。</li>
</ol>
<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 获取默认的 Realm 数据库</div><div class="line">RLMRealm *realm = [RLMRealm defaultRealm];</div><div class="line">// （每个线程）只需执行一次</div><div class="line"></div><div class="line">// 在事务中向 Realm 数据库中添加数据</div><div class="line">[realm beginWriteTransaction];</div><div class="line">[realm addObject:myDog];</div><div class="line">[realm commitWriteTransaction];</div></pre></td></tr></table></figure>
<h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 在事务中删除对象</div><div class="line">[realm beginWriteTransaction];</div><div class="line">[realm deleteObject:myDog];</div><div class="line">[realm commitWriteTransaction];</div><div class="line"></div><div class="line">// 从 Realm 数据库中删除所有对象</div><div class="line">[realm beginWriteTransaction];</div><div class="line">[realm deleteAllObjects];</div><div class="line">[realm commitWriteTransaction];</div></pre></td></tr></table></figure>
<h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 在事务中更新对象</div><div class="line">[realm beginWriteTransaction];</div><div class="line">myDog.name = @&quot;Thomas Pynchon&quot;;</div><div class="line">[realm commitWriteTransaction];</div></pre></td></tr></table></figure>
<h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>Realm 条件查询方式与 NSPredicate 类似。</p>
<ul>
<li><p>比较操作数可以是属性名，也可以是常量。但至少要有一个操作数是属性名；</p>
</li>
<li><p>比较操作符 <strong>==</strong>、<strong>&lt;=</strong>、<strong>&lt;</strong>、<strong>&gt;=</strong>、<strong>&gt;</strong>、<strong>!=</strong> 和 <strong>BETWEEN</strong> 支持 <code>int</code>、<code>long</code>、<code>long long</code>、<code>float</code>、<code>double</code>以及 <code>NSDate</code> 这几种属性类型，例如 <code>age == 45</code>；</p>
</li>
<li><p>比较是否相同：<strong>==</strong> 和 <strong>!=</strong>，例如，<code>[Employee objectsWhere:@&quot;company == %@&quot;, company]</code>；</p>
</li>
<li><p>比较操作符 <strong>==</strong> 和 <strong>!=</strong> 支持布尔属性；</p>
</li>
<li><p>对于 <code>NSString</code> 和 <code>NSData</code> 属性而言，支持使用 <strong>==</strong>、<strong>!=</strong>、<strong>BEGINSWITH</strong>、<strong>CONTAINS</strong> 和 <strong>ENDSWITH</strong>操作符，例如 <code>name CONTAINS &#39;Ja&#39;</code>；</p>
</li>
<li><p>对于 <code>NSString</code> 属性而言，<strong>LIKE</strong> 操作符可以用来比较左端属性和右端表达式：<code>?</code> 和 <code>*</code> 可用作通配符，其中 <code>?</code> 可以匹配任意一个字符，<code>*</code> 匹配 0 个及其以上的字符。例如：<code>value LIKE &#39;?bc*&#39;</code> 可以匹配到诸如 “abcde” 和 “cbc” 之类的字符串；</p>
</li>
<li><p>字符串的比较忽略大小写，例如 <code>name CONTAINS[c] &#39;Ja&#39;</code>。请注意，只有 “A-Z” 和 “a-z” 之间的字符大小写会被忽略。<code>[c]</code> 修饰符可以与 <code>[d]</code> 修饰符结合使用；</p>
</li>
<li><p>字符串的比较忽略变音符号，例如 <code>name BEGINSWITH[d] &#39;e&#39;</code> 能够匹配到 <strong>étoile</strong>。这个修饰符可以与 <code>[c]</code> 修饰符结合使用。（这个修饰符只能够用于 Realm 所支持的字符串子集：参见<a href="https://realm.io/cn/docs/objc/latest/#limitations-general" target="_blank" rel="external">当前的限制</a>一节来了解详细信息。）</p>
</li>
<li><p>Realm 支持以下组合操作符：<strong>“AND”</strong>、<strong>“OR”</strong> 和 <strong>“NOT”</strong>，例如 <code>name BEGINSWITH &#39;J&#39; AND age &gt;= 32</code>；</p>
</li>
<li><p>包含操作符：<strong>IN</strong>，例如 <code>name IN {&#39;Lisa&#39;, &#39;Spike&#39;, &#39;Hachi&#39;}</code>；</p>
</li>
<li><p>空值比较：<strong>==</strong>、<strong>!=</strong>，例如 <code>[Company objectsWhere:@&quot;ceo == nil&quot;]</code>。请注意，Realm 将 <code>nil</code> 视为一种特殊值，而不是某种缺失值；这与 SQL 不同，<code>nil</code> 等同于自身；</p>
</li>
<li><p><strong>ANY 比较</strong>，例如 <code>ANY student.age &lt; 21</code>；</p>
</li>
<li><p><code>RLMArray</code> 和 <code>RLMResults</code> 属性支持聚集表达式：<strong>@count</strong>、<strong>@min</strong>、<strong>@max</strong>、<strong>@sum</strong> 和 <strong>@avg</strong>，例如 <code>[Company objectsWhere:@&quot;employees.@count &gt; 5&quot;]</code> 可用以检索所有拥有 5 名以上雇员的公司。</p>
</li>
<li><p>支持子查询，不过存在以下限制：</p>
</li>
</ul>
<ul>
<li><strong>@count</strong> 是唯一一个能在 <strong>SUBQUERY</strong> 表达式当中使用的操作符；</li>
<li><code>SUBQUERY(…).@count</code> 表达式只能与常量相比较；</li>
<li>目前仍不支持关联子查询。</li>
</ul>
<p>关于谓词请阅读👉<a href="http://www.cocoachina.com/ios/20160111/14926.html" target="_blank" rel="external">iOS中的谓词（NSPredicate）使用</a></p>
]]></content>
      
        <categories>
            
            <category> 工具集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Realm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xcode Tips]]></title>
      <url>/2017/09/22/Xcode-Tips/</url>
      <content type="html"><![CDATA[<p><img src="/2017/09/22/Xcode-Tips/Xcode Tips.png" alt=""> </p>
<a id="more"></a>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="MARK-、TODO-、BUG"><a href="#MARK-、TODO-、BUG" class="headerlink" title="MARK 、TODO 、BUG"></a>MARK 、TODO 、BUG</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: -作记号内容</span></div><div class="line"><span class="comment">// <span class="doctag">TODO:</span> -需要完成的任务描述</span></div><div class="line"><span class="comment">// <span class="doctag">FIXME:</span> -需要修复BUG的描述</span></div></pre></td></tr></table></figure>
<h3 id="添加警告"><a href="#添加警告" class="headerlink" title="添加警告"></a>添加警告</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#warning <span class="meta-string">"警告的描述"</span></span></div></pre></td></tr></table></figure>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><h3 id="shift-command-o"><a href="#shift-command-o" class="headerlink" title="shift + command + o"></a>shift + command + o</h3><blockquote>
<p>快速搜索文件，以及搜索方法名定位方法实现代码</p>
</blockquote>
<h3 id="control-6"><a href="#control-6" class="headerlink" title="control + 6"></a>control + 6</h3><blockquote>
<p>快速定位想编辑的方法</p>
<p>列出当前文件中所有的方法，可以通过输入关键字来过滤</p>
</blockquote>
<h3 id="shift-command-j"><a href="#shift-command-j" class="headerlink" title="shift + command + j"></a>shift + command + j</h3><blockquote>
<p>打开对应文件的目录</p>
</blockquote>
<h3 id="control-i"><a href="#control-i" class="headerlink" title="control + i"></a>control + i</h3><blockquote>
<p>方法名中<code>：</code>上下对齐排版</p>
</blockquote>
<h3 id="option-command-左右键"><a href="#option-command-左右键" class="headerlink" title="option + command + 左右键"></a>option + command + 左右键</h3><blockquote>
<p>收起 &amp; 展开 代码段</p>
</blockquote>
<h3 id="control-command-上下键"><a href="#control-command-上下键" class="headerlink" title="control + command + 上下键"></a>control + command + 上下键</h3><blockquote>
<p>在.h和.m文件之间切换</p>
</blockquote>
<h3 id="command-return"><a href="#command-return" class="headerlink" title="command + return"></a>command + return</h3><blockquote>
<p>切换成 standsrd editor</p>
</blockquote>
<h3 id="command-option-return"><a href="#command-option-return" class="headerlink" title="command + option + return"></a>command + option + return</h3><blockquote>
<p>切换成 assistan editor</p>
</blockquote>
<h3 id="左侧、右侧、底部工具栏"><a href="#左侧、右侧、底部工具栏" class="headerlink" title="左侧、右侧、底部工具栏"></a>左侧、右侧、底部工具栏</h3><h4 id="command-shift-Y"><a href="#command-shift-Y" class="headerlink" title="command + shift + Y"></a>command + shift + Y</h4><blockquote>
<p>切换底部 Console VIew 显示或者隐藏</p>
</blockquote>
<h4 id="command-0"><a href="#command-0" class="headerlink" title="command + 0"></a>command + 0</h4><blockquote>
<p>切换左边导航区（Navigator）显示或者隐藏</p>
</blockquote>
<h4 id="command-option-0"><a href="#command-option-0" class="headerlink" title="command + option + 0"></a>command + option + 0</h4><blockquote>
<p>切换右边工具区（Utility）显示或者隐藏</p>
</blockquote>
<h3 id="Tab栏"><a href="#Tab栏" class="headerlink" title="Tab栏"></a>Tab栏</h3><h4 id="command-T"><a href="#command-T" class="headerlink" title="command + T"></a>command + T</h4><blockquote>
<p>新建一个Tab栏</p>
</blockquote>
<h4 id="command-shift-或者"><a href="#command-shift-或者" class="headerlink" title="command + shift + [ 或者 ]"></a>command + shift + [ 或者 ]</h4><blockquote>
<p>Tab栏左右切换</p>
</blockquote>
<h2 id="开启无线调试"><a href="#开启无线调试" class="headerlink" title="开启无线调试"></a>开启无线调试</h2><p>前提： <code>iOS 11 + Xcode 9</code>  以上设备</p>
<p>步骤： </p>
<ul>
<li>用数据线链接设备</li>
<li><code>Window</code> -&gt; <code>Device and Simulators</code></li>
<li>找到对应设备，勾选 <code>Connect via network</code></li>
<li>断开数据线，运行即可。</li>
</ul>
<p>只需操作一次，之后开启Xcode会自动连接。</p>
<p>持续整理更新。。。</p>
]]></content>
      
        <categories>
            
            <category> 工具集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Xcode </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OC 常量]]></title>
      <url>/2017/09/18/OC%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<p><img src="/2017/09/18/OC常量与变量/OC常量与变量.png" alt=""> </p>
<a id="more"></a>
<h2 id="全局常量的常见用法"><a href="#全局常量的常见用法" class="headerlink" title="全局常量的常见用法"></a>全局常量的常见用法</h2><p>通过 <code>FOUNDATION_EXPORT</code> 定义全局常量</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// .h文件</span></div><div class="line">FOUNDATION_EXPORT <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingReachabilityNotificationStatusItem;</div><div class="line"></div><div class="line"><span class="comment">// .m文件</span></div><div class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingReachabilityDidChangeNotification = <span class="string">@"com.alamofire.networking.reachability.change"</span>;</div></pre></td></tr></table></figure>
<p>通过 <code>extern</code> 和 <code>const</code> 定义全局常量</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// .h文件</span></div><div class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> YLConstApplyResultForRefuseIcon;</div><div class="line"></div><div class="line"><span class="comment">// .m文件</span></div><div class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> YLConstApplyResultForRefuseIcon = <span class="string">@"approval-refuse"</span>;</div></pre></td></tr></table></figure>
<h2 id="局部常量的常见用法"><a href="#局部常量的常见用法" class="headerlink" title="局部常量的常见用法"></a>局部常量的常见用法</h2><p>方法内的常量</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 保证局部变量永远只初始化一次，在程序的运行过程中永远只有一份内存</span></div><div class="line"><span class="keyword">static</span> XYGCDAsyncSocketManager *staticInstance = <span class="literal">nil</span>;</div><div class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div></pre></td></tr></table></figure>
<p>方法体外，类内部使用的常量</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kAFMultipartFormCRLF = <span class="string">@"\r\n"</span>;</div></pre></td></tr></table></figure>
<h2 id="const修饰符说明"><a href="#const修饰符说明" class="headerlink" title="const修饰符说明"></a>const修饰符说明</h2><ul>
<li>const用来修饰右边的基本变量或指针变量</li>
<li>被修饰的变量只读，不能被修改</li>
</ul>
<h2 id="static修饰符说明"><a href="#static修饰符说明" class="headerlink" title="static修饰符说明"></a>static修饰符说明</h2><p>修饰局部变量:   </p>
<ul>
<li>在方法体内，声明为静态的变量（局部静态变量）。保证局部变量永远只初始化一次，在程序的运行过程中永远只有一份内存，生命周期类似全局变量了，但是作用域不变。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 单例</span></div><div class="line">+ (<span class="keyword">nonnull</span> <span class="keyword">instancetype</span>)sharedInstance &#123;</div><div class="line">    <span class="keyword">static</span> XYGCDAsyncSocketManager *staticInstance = <span class="literal">nil</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        staticInstance = [[<span class="keyword">self</span> alloc] init];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> staticInstance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在方法体外，类内部使用的常量</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kAFMultipartFormCRLF = <span class="string">@"\r\n"</span>;</div></pre></td></tr></table></figure>
<h2 id="extern修饰符说明"><a href="#extern修饰符说明" class="headerlink" title="extern修饰符说明"></a>extern修饰符说明</h2><ul>
<li>声明外部全局变量,这里需要特别注意extern只能声明，不能用于实现。</li>
</ul>
<h2 id="FOUNDATION-EXPORT-与-＃define"><a href="#FOUNDATION-EXPORT-与-＃define" class="headerlink" title="FOUNDATION_EXPORT 与 ＃define"></a>FOUNDATION_EXPORT 与 ＃define</h2><p><code>FOUNDATION_EXPORT</code> 与 <code>＃define</code> 都可以用来定义常量的。</p>
<p><code>FOUNDATION_EXPORT</code> 定义的常量可以直接使用 <code>myString == MyFirstConstant</code> 来比较, 而 <code>define</code> 则使用的是 <code>[myString isEqualToString:MyFirstContant]</code> 。</p>
<ul>
<li><code>FOUNDATION_EXPORT</code> 是直接比较指针地址。</li>
<li><code>define</code> 则是一一比较字符串的每一个字符是否相等。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AFNetworking 源码阅读笔记]]></title>
      <url>/2017/08/08/AFNetworking-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="/2017/08/08/AFNetworking-阅读笔记/AFNetworking.png" alt=""> </p>
<a id="more"></a>
<h2 id="框架中用到的一些宏"><a href="#框架中用到的一些宏" class="headerlink" title="框架中用到的一些宏"></a>框架中用到的一些宏</h2><h3 id="DEPRECATED-ATTRIBUTE"><a href="#DEPRECATED-ATTRIBUTE" class="headerlink" title="DEPRECATED_ATTRIBUTE"></a><code>DEPRECATED_ATTRIBUTE</code></h3><p>在声明属性或者方法时，在后面加上 <code>DEPRECATED_ATTRIBUTE</code>，可以用来标识该方法将会被慢慢弃用属性或接口的，当我们不想让别人再用这属性或接口时，可以加上这个宏，如果别人仍然调用，则编译器会报警告。  </p>
<p>此宏常用于框架迭代时，新旧方法和属性替换的过渡阶段。 （⚠️ 必需放在”;”前）</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AFNetworking 3.0 框架中即将被弃用的POST请求</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSURLSessionDataTask</span> *)POST:(<span class="built_in">NSString</span> *)URLString</div><div class="line">                    parameters:(<span class="keyword">nullable</span> <span class="keyword">id</span>)parameters</div><div class="line">                       success:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionDataTask</span> *task, <span class="keyword">id</span> _Nullable responseObject))success</div><div class="line">                       failure:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> *error))failure DEPRECATED_ATTRIBUTE;</div><div class="line">                       </div><div class="line"><span class="comment">// 在属性声明时加入 DEPRECATED_ATTRIBUTE 表明此属性将会被弃用                      </span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>) <span class="built_in">NSURL</span> *baseURL DEPRECATED_ATTRIBUTE;</div></pre></td></tr></table></figure>
<h3 id="NS-DESIGNATED-INITIALIZER"><a href="#NS-DESIGNATED-INITIALIZER" class="headerlink" title="NS_DESIGNATED_INITIALIZER"></a><code>NS_DESIGNATED_INITIALIZER</code></h3><p>此宏的意思是最终被指定的初始化方法，在一个类的<code>interface</code>中只能用一次，而且必须是以<code>init</code>开头的方法。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UIContentContainer通过xib初始化实例对象</span></div><div class="line">- (<span class="keyword">instancetype</span>)initWithNibName:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)nibNameOrNil bundle:(<span class="keyword">nullable</span> <span class="built_in">NSBundle</span> *)nibBundleOrNil <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</div></pre></td></tr></table></figure>
<h3 id="NS-ASSUME-NONNULL-BEGIN-与-NS-ASSUME-NONNULL-END"><a href="#NS-ASSUME-NONNULL-BEGIN-与-NS-ASSUME-NONNULL-END" class="headerlink" title="NS_ASSUME_NONNULL_BEGIN 与 NS_ASSUME_NONNULL_END"></a><code>NS_ASSUME_NONNULL_BEGIN</code> 与 <code>NS_ASSUME_NONNULL_END</code></h3><p>请看<a href="#nullable和nonnull"><code>nullable</code> 和 <code>nonnull</code> </a>  </p>
<p> <span id="FOUNDATION_EXPORT"></span></p>
<h3 id="FOUNDATION-EXPORT"><a href="#FOUNDATION-EXPORT" class="headerlink" title="FOUNDATION_EXPORT"></a><code>FOUNDATION_EXPORT</code></h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FOUNDATION_EXPORT <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingReachabilityNotificationStatusItem;</div></pre></td></tr></table></figure>
<p><code>FOUNDATION_EXPORT</code>与 <code>＃define</code>都可以用来定义常量的。</p>
<p><code>FOUNDATION_EXPORT</code>定义的常量可以直接使用(myString == MyFirstConstant)来比较, 而<code>define</code>则使用的是([myString isEqualToString:MyFirstContant])。  </p>
<ul>
<li><code>FOUNDATION_EXPORT</code>是直接比较指针地址。   </li>
<li><code>define</code>则是一一比较字符串的每一个字符是否相等。</li>
</ul>
<p>更多常量说明请查阅<a href="#关于全局常量">关于全局常量</a></p>
<h3 id="NS-UNAVAILABLE"><a href="#NS-UNAVAILABLE" class="headerlink" title="NS_UNAVAILABLE"></a><code>NS_UNAVAILABLE</code></h3><p>告诉编译器方法不可用，如果使用了就会编译失败，提示错误。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)init <span class="built_in">NS_UNAVAILABLE</span>;</div></pre></td></tr></table></figure>
<h3 id="Require-Quiet-和-Require-noErr-Quiet"><a href="#Require-Quiet-和-Require-noErr-Quiet" class="headerlink" title="__Require_Quiet 和 __Require_noErr_Quiet"></a><code>__Require_Quiet</code> 和 <code>__Require_noErr_Quiet</code></h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">id</span> AFPublicKeyForCertificate(<span class="built_in">NSData</span> *certificate) &#123;</div><div class="line">    <span class="keyword">id</span> allowedPublicKey = <span class="literal">nil</span>;</div><div class="line">    SecCertificateRef allowedCertificate;</div><div class="line">    SecPolicyRef policy = <span class="literal">nil</span>;</div><div class="line">    SecTrustRef allowedTrust = <span class="literal">nil</span>;</div><div class="line">    SecTrustResultType result;</div><div class="line"></div><div class="line">    allowedCertificate = SecCertificateCreateWithData(<span class="literal">NULL</span>, (__bridge <span class="built_in">CFDataRef</span>)certificate);</div><div class="line">    __Require_Quiet(allowedCertificate != <span class="literal">NULL</span>, _<span class="keyword">out</span>);</div><div class="line"></div><div class="line">    policy = SecPolicyCreateBasicX509();</div><div class="line">    __Require_noErr_Quiet(SecTrustCreateWithCertificates(allowedCertificate, policy, &amp;allowedTrust), _<span class="keyword">out</span>);</div><div class="line">    __Require_noErr_Quiet(SecTrustEvaluate(allowedTrust, &amp;result), _<span class="keyword">out</span>);</div><div class="line"></div><div class="line">    allowedPublicKey = (__bridge_transfer <span class="keyword">id</span>)SecTrustCopyPublicKey(allowedTrust);</div><div class="line"></div><div class="line">_<span class="keyword">out</span>:</div><div class="line">    <span class="keyword">if</span> (allowedTrust) &#123;</div><div class="line">        <span class="built_in">CFRelease</span>(allowedTrust);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (policy) &#123;</div><div class="line">        <span class="built_in">CFRelease</span>(policy);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (allowedCertificate) &#123;</div><div class="line">        <span class="built_in">CFRelease</span>(allowedCertificate);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> allowedPublicKey;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>__Require_Quiet</code>可以看出这个宏的用途是：当条件返回false时，执行标记以后的代码。<br><code>__Require_noErr_Quiet</code>可以看出这个宏的用途是：当条件抛出异常时，执行标记以后的代码。</p>
<h2 id="nullable-和-nonnull"><a href="#nullable-和-nonnull" class="headerlink" title="nullable 和 nonnull"></a><code>nullable</code> 和 <code>nonnull</code></h2><p>从字面上我们可以猜到，<code>nullable</code>表示对象可以是<code>NULL</code>或<code>nil</code>，而<code>nonnull</code>表示对象不应该为空。当我们不遵循这一规则时，编译器就会给出警告。 </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 属性声明的三种修饰方式</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>) <span class="built_in">NSURL</span> * baseURL;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSURL</span> * _Nullable baseURL;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSURL</span> * __<span class="keyword">nullable</span> baseURL;</div><div class="line"></div><div class="line"><span class="comment">// 方法返回值与方法参数时修饰</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSURLSessionDataTask</span> *)GET:(<span class="built_in">NSString</span> *)URLString</div><div class="line">                            parameters:(<span class="keyword">nullable</span> <span class="keyword">id</span>)parameters</div><div class="line">                              progress:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *downloadProgress))downloadProgress</div><div class="line">                               success:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionDataTask</span> *task, <span class="keyword">id</span> _Nullable responseObject))success</div><div class="line">                               failure:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> *error))failure;</div></pre></td></tr></table></figure>
<p>而对于 双指针类型对象 、 <code>Block</code> 的返回值 、 <code>Block</code> 的参数 等，这时候就不能用 <code>nonnull/nullable</code> 修饰，只能用带下划线的 <code>__nonnull/__nullable</code> 或者 <code>_Nonnull/_Nullable</code>。</p>
<p>在AFNetworking框架中可见  </p>
<ul>
<li>属性、方法返回值、方法参数的修饰，使用： <code>nonnull/nullable</code></li>
<li>Block 的参数、Block 返回值的修饰，使用： <code>_Nonnull/_Nullable</code></li>
</ul>
<p><span id="nullable和nonnull"></span></p>
<p>如果需要每个属性或每个方法都去指定 <code>nonnull</code> 和 <code>nullable</code> ，将是一件非常繁琐的事。苹果为了减轻我们的工作量，专门提供了两个宏： <code>NS_ASSUME_NONNULL_BEGIN</code> 和 <code>NS_ASSUME_NONNULL_END</code> 。在这两个宏之间的代码，所有简单指针对象都被假定为 <code>nonnull</code> ，因此我们只需要去指定那些 <code>nullable</code> 指针对象即可。AFNetworking框架中做了如此的操作。</p>
<p><a href="http://blog.csdn.net/bravegogo/article/details/52458403" target="_blank" rel="external"><code>nullable</code>、<code>__nullable</code>、<code>_Nullable</code> 究竟有什么区别呢？</a></p>
<h2 id="amp-与"><a href="#amp-与" class="headerlink" title="&amp; 与 @"></a><code>&amp;</code> 与 <code>@</code></h2><ul>
<li><code>&amp;</code> 表示取地址的意思，和C语言一样</li>
<li><code>@</code> 表示字面量</li>
</ul>
<p><a href="http://www.jianshu.com/p/e89bd39e4849" target="_blank" rel="external">ios中的字面量语法</a></p>
<h2 id="name和-pragma-mark"><a href="#name和-pragma-mark" class="headerlink" title="@name和 #pragma mark"></a><code>@name</code>和 <code>#pragma mark</code></h2><p><code>AFNetworking</code>作者使用了<code>@name</code>来分隔 <code>.h</code> 文件中中不同功能代码。在 <code>.m</code> 文件中用<code>#pragma mark</code>分隔不同功能代码。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///---------------------</span></div><div class="line"><span class="comment">/// @name Initialization</span></div><div class="line"><span class="comment">///---------------------</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - NSCopying</span></div></pre></td></tr></table></figure>
<h2 id="pragma-clang-diagnostic-ignored"><a href="#pragma-clang-diagnostic-ignored" class="headerlink" title="#pragma clang diagnostic ignored"></a><code>#pragma clang diagnostic ignored</code></h2><p>首先, <code>#pragma</code> 本质上也是声明，一般常用的功能就是打注释、尤其是分段注释,但是 <code>#pragma</code> 另外一个强大的功能就是处理编译器警告，用的时候可能就没上一个,功能用的那么多，在代码中处理警告却是极其高效的方法。</p>
<p>其中 <code>clang diagnostic</code> 便是 <code>#pragma</code> 第一个功能常用的命令，步骤如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma clang diagnostic push  </span></div><div class="line"><span class="meta">#pragma clang diagnostic ignored <span class="meta-string">"-相关命令"</span>  </span></div><div class="line"><span class="comment">// 你自己的代码  </span></div><div class="line"><span class="meta">#pragma clang diagnostic pop</span></div></pre></td></tr></table></figure>
<p>常用 “-相关命令”  :</p>
<ul>
<li>方法弃用告警 <code>&quot;-Wdeprecated-declarations&quot;</code>  </li>
<li>不兼容指针类型 <code>&quot;-Wincompatible-pointer-types&quot;</code>  </li>
<li>循环引用 <code>&quot;-Warc-retain-cycles&quot;</code>  </li>
<li>未使用变量 <code>&quot;-Wunused-variable&quot;</code>     </li>
</ul>
<p><a href="http://clang.llvm.org/docs/UsersManual.html#diagnostics_pragma
s" target="_blank" rel="external">“-相关命令” 列表</a><br><a href="http://nshipster.cn/pragma/" target="_blank" rel="external">#pragma</a></p>
<p><span id="关于全局常量"></span></p>
<h2 id="关于全局常量"><a href="#关于全局常量" class="headerlink" title="关于全局常量"></a>关于全局常量</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// .h</span></div><div class="line"></div><div class="line"><span class="comment">///--------------------</span></div><div class="line"><span class="comment">/// @name Notifications</span></div><div class="line"><span class="comment">///--------------------</span></div><div class="line"></div><div class="line">FOUNDATION_EXPORT <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingReachabilityDidChangeNotification;</div><div class="line">FOUNDATION_EXPORT <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingReachabilityNotificationStatusItem;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// .m</span></div><div class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingReachabilityDidChangeNotification = <span class="string">@"com.alamofire.networking.reachability.change"</span>;</div><div class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingReachabilityNotificationStatusItem = <span class="string">@"AFNetworkingReachabilityNotificationStatusItem"</span>;</div></pre></td></tr></table></figure>
<p>AFNetworking框架中通知的字符串封装到发通知的文件中（AFNetworkReachabilityManager类），同时在文件内部按不同模块进行区分。</p>
<p>通知的字符串的声明在.h 赋值在.m中，可以防止在.h中被修改。</p>
<p> 仔细看通知的字符串的命名。可以发现</p>
<ul>
<li>类名 + 业务相关（动词） + Notification </li>
<li>类名 + Notification + 业务相关（名词）</li>
</ul>
<p><a href="#FOUNDATION_EXPORT"><code>FOUNDATION_EXPORT</code> </a> 的用法请查看<code>框架中用到的一些宏</code>模块。<br><a href="http://blog.csdn.net/qq_32010299/article/details/51836806" target="_blank" rel="external">关于FOUNDATION_EXTERN、extern、FOUNDATION_EXPORT、extern “C”的区别</a></p>
<p>通常会写一个方法通过<code>枚举</code>和<code>switch</code>返回对应的字符串，在<code>AFNetworking</code>框架中看到一种骚气的操作。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在.h声明</span></div><div class="line">FOUNDATION_EXPORT <span class="built_in">NSString</span> * AFStringFromNetworkReachabilityStatus(AFNetworkReachabilityStatus status);</div><div class="line"></div><div class="line"><span class="comment">// 在.m实现</span></div><div class="line"><span class="built_in">NSString</span> * AFStringFromNetworkReachabilityStatus(AFNetworkReachabilityStatus status) &#123;</div><div class="line">    <span class="keyword">switch</span> (status) &#123;</div><div class="line">        <span class="keyword">case</span> AFNetworkReachabilityStatusNotReachable:</div><div class="line">            <span class="keyword">return</span> <span class="built_in">NSLocalizedStringFromTable</span>(<span class="string">@"Not Reachable"</span>, <span class="string">@"AFNetworking"</span>, <span class="literal">nil</span>);</div><div class="line">        <span class="keyword">case</span> AFNetworkReachabilityStatusReachableViaWWAN:</div><div class="line">            <span class="keyword">return</span> <span class="built_in">NSLocalizedStringFromTable</span>(<span class="string">@"Reachable via WWAN"</span>, <span class="string">@"AFNetworking"</span>, <span class="literal">nil</span>);</div><div class="line">        <span class="keyword">case</span> AFNetworkReachabilityStatusReachableViaWiFi:</div><div class="line">            <span class="keyword">return</span> <span class="built_in">NSLocalizedStringFromTable</span>(<span class="string">@"Reachable via WiFi"</span>, <span class="string">@"AFNetworking"</span>, <span class="literal">nil</span>);</div><div class="line">        <span class="keyword">case</span> AFNetworkReachabilityStatusUnknown:</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> <span class="built_in">NSLocalizedStringFromTable</span>(<span class="string">@"Unknown"</span>, <span class="string">@"AFNetworking"</span>, <span class="literal">nil</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 调用</span></div><div class="line">AFStringFromNetworkReachabilityStatus(<span class="keyword">self</span>.networkReachabilityStatus);</div></pre></td></tr></table></figure>
<p><a href="http://www.jianshu.com/p/064b5b82a3a2" target="_blank" rel="external">iOS常量(const)、enum、宏(#define)的使用场景及区别</a></p>
<h2 id="关于局部常量"><a href="#关于局部常量" class="headerlink" title="关于局部常量"></a>关于局部常量</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">NSUInteger</span> <span class="keyword">const</span> batchSize = <span class="number">50</span>;</div></pre></td></tr></table></figure>
<h2 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h2><p>TO-DO </p>
<h2 id="类中的私有方法"><a href="#类中的私有方法" class="headerlink" title="类中的私有方法"></a>类中的私有方法</h2><p>在AFNetworking框架中把私有方法写成<code>static void funcName()</code> 这样的<code>C函数</code>，并且写在<code>@interface</code>上方。</p>
<ul>
<li>写在在文件的最前方，比较容易查找</li>
<li>可以适当的使用内联函数，提高效率。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> AFPostReachabilityStatusChange(<span class="built_in">SCNetworkReachabilityFlags</span> flags, AFNetworkReachabilityStatusBlock block) &#123;</div><div class="line">    AFNetworkReachabilityStatus status = AFNetworkReachabilityStatusForFlags(flags);</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">        <span class="keyword">if</span> (block) &#123;</div><div class="line">            block(status);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">NSNotificationCenter</span> *notificationCenter = [<span class="built_in">NSNotificationCenter</span> defaultCenter];</div><div class="line">        <span class="built_in">NSDictionary</span> *userInfo = @&#123; AFNetworkingReachabilityNotificationStatusItem: @(status) &#125;;</div><div class="line">        [notificationCenter postNotificationName:AFNetworkingReachabilityDidChangeNotification object:<span class="literal">nil</span> userInfo:userInfo];</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ifdef-ifndef-if-else-endif"><a href="#ifdef-ifndef-if-else-endif" class="headerlink" title="#ifdef #ifndef #if #else #endif"></a>#ifdef #ifndef #if #else #endif</h2><p><a href="http://blog.csdn.net/wwwang89123/article/details/17436577" target="_blank" rel="external">Objective–C语言预处理命令之条件编译（#ifdef,#else,#endif,#if等）</a>  </p>
<p>当必须要对条件进行判断的时候，我们有下边几种方案了</p>
<ul>
<li><code>#ifdef</code> 这个是编译特性</li>
<li><code>if else</code> 代码层次的判断</li>
<li><code>__Require_XXX</code> 宏</li>
</ul>
<h2 id="continue、break、return的区别"><a href="#continue、break、return的区别" class="headerlink" title="continue、break、return的区别"></a>continue、break、return的区别</h2><ul>
<li><code>break</code><br>多用于循环语句，如<code>for</code>、<code>while</code> 、<code>switch</code>。当程序执行到<code>break</code>时在循环中表示结束整个循环,而且在多层嵌套中，一个break只能跳出一层循环。<ul>
<li><code>continue</code><br>用于在循环体中进行跳转，当程序执行到continue时，表示忽略其后面的代码（或者说结束本次循环），继续执行下一次循环。  </li>
</ul>
</li>
<li><code>return</code><br>表示从被调函数返回到主调函数继续执行，返回时可附带一个返回值，由return后面的参数指定。      </li>
</ul>
<h2 id="HTTPS和HTTP"><a href="#HTTPS和HTTP" class="headerlink" title="HTTPS和HTTP"></a>HTTPS和HTTP</h2><p><a href="http://www.jianshu.com/p/650ad90bf563" target="_blank" rel="external">简单粗暴系列之HTTPS原理</a><br><a href="http://www.jianshu.com/p/5969bbb4af9f" target="_blank" rel="external">别说你会AFNetworking3.0/NSURLSession</a><br><a href="http://www.jianshu.com/p/4102b817ff2f" target="_blank" rel="external">正确使用AFNetworking的SSL保证网络安全</a><br><a href="http://www.jianshu.com/p/a9bca62d8dab" target="_blank" rel="external">与时俱进，HTTP/2下的iOS网络层架构设计</a><br><a href="http://www.jianshu.com/p/9c1979ef2a70" target="_blank" rel="external">移动基础设施的建设</a></p>
<h2 id="NSSecureCoding"><a href="#NSSecureCoding" class="headerlink" title="NSSecureCoding"></a>NSSecureCoding</h2><p><a href="http://blog.jobbole.com/67655/" target="_blank" rel="external">使用NSSecureCoding协议进行对象编解码</a></p>
<h2 id="NSCopying"><a href="#NSCopying" class="headerlink" title="NSCopying"></a>NSCopying</h2><p><a href="http://www.jianshu.com/p/e98e6e30ebda" target="_blank" rel="external">iOS中几个常用协议（一）NSCopying/NSMutableCopying</a>  </p>
<h2 id="NSIndexSet"><a href="#NSIndexSet" class="headerlink" title="NSIndexSet"></a>NSIndexSet</h2><p><a href="http://www.jianshu.com/p/84a1d5296844" target="_blank" rel="external">NSIndexSet 用法</a></p>
<p>未完待续…</p>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OC </tag>
            
            <tag> AFNetworking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[循环引用的坑]]></title>
      <url>/2017/08/07/%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<p><img src="/2017/08/07/循环引用的坑/循环引用的坑.png" alt=""> </p>
<a id="more"></a>
<p>循环引用是iOS开发中经常遇到的问题，对App有潜在的危害，会使引起内存消耗过高，性能变差和Crash等问题。  </p>
<h2 id="Delegate"><a href="#Delegate" class="headerlink" title="Delegate"></a>Delegate</h2><p>代理协议是一个最典型的场景，需要你使用弱引用来避免循环引用。ARC时代，需要将代理声明为weak是一个即好又安全的做法。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> &lt;myDelegate&gt; delegate;</div></pre></td></tr></table></figure>
<h2 id="NSTimer"><a href="#NSTimer" class="headerlink" title="NSTimer"></a>NSTimer</h2><p>在退出控制器时关闭计时器。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    _timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">0.1</span></div><div class="line">                                              target:<span class="keyword">self</span></div><div class="line">                                            selector:<span class="keyword">@selector</span>(p_doSomeThing)</div><div class="line">                                            userInfo:<span class="literal">nil</span></div><div class="line">                                             repeats:<span class="literal">YES</span>];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)p_doSomeThing &#123;</div><div class="line">    <span class="comment">// doSomeThing</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)p_stopDoSomeThing &#123;</div><div class="line">    [<span class="keyword">self</span>.timer invalidate];</div><div class="line">    <span class="keyword">self</span>.timer = <span class="literal">nil</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">     [<span class="keyword">self</span>.timer invalidate];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h2><p>采用weakSelf，内部不会有强类型的指针，就可以解决循环引用问题。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">__<span class="keyword">weak</span> __<span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</div><div class="line"><span class="keyword">self</span>.callbackBlock = ^&#123;</div><div class="line">  [weakSelf doSomething];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h2 id="其他内存问题"><a href="#其他内存问题" class="headerlink" title="其他内存问题"></a>其他内存问题</h2><ul>
<li><p>NSNotification addObserver之后，记得在dealloc里面添加remove;</p>
</li>
<li><p>动画的repeat count无限大，而且也不主动停止动画，基本就等于无限循环了;</p>
</li>
<li><p>forwardingTargetForSelector返回了self。</p>
</li>
</ul>
<h2 id="内存解决思路："><a href="#内存解决思路：" class="headerlink" title="内存解决思路："></a>内存解决思路：</h2><ul>
<li><p>通过Instruments来查看leaks</p>
</li>
<li><p>集成Facebook开源的FBRetainCycleDetector</p>
</li>
<li><p>集成MLeaksFinder</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OC </tag>
            
            <tag> 循环引用 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[剪不断理还乱,是架构]]></title>
      <url>/2017/08/03/%E6%8E%A2%E5%AF%BB%E6%9C%80%E9%80%82%E5%90%88%E4%B8%9A%E5%8A%A1%E7%9A%84%E6%9E%B6%E6%9E%84/</url>
      <content type="html"><![CDATA[<p><img src="/2017/08/03/探寻最适合业务的架构/探寻最适合业务的架构.png" alt=""> </p>
<a id="more"></a>
<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>在 iOS 开发中，MVC（Model View Controller）是构建iOS App的标准模式，是苹果推荐的一个用来组织代码的权威范式。</p>
<p>所谓的 MVC 是指：  </p>
<ul>
<li>Model: 数据的拥有者，实现具体的业务逻辑。  </li>
<li>View: 具体的用户界面。  </li>
<li>Controller: 负责将 View 中用户的动作传达给 Model，将 Model 的数据通过 View 展现出来。   </li>
</ul>
<h3 id="关于Controller的臃肿问题"><a href="#关于Controller的臃肿问题" class="headerlink" title="关于Controller的臃肿问题"></a>关于Controller的臃肿问题</h3><p>Controller 里面就只应该存放这些不能复用的代码，这些代码包括：  </p>
<ul>
<li>在初始化时，构造相应的 View 和 Model。  </li>
<li>监听 Model 层的事件，将 Model 层的数据传递到 View 层。  </li>
<li>监听 View 层的事件，并且将 View 层的事件转发到 Model 层。  </li>
</ul>
<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p><img src="/2017/08/03/探寻最适合业务的架构/MVVM框架.png" alt="MVVM框架">   </p>
<p>如图：MVVM 框架是 MVC 的增强版，我们正式连接了视图和控制器，并将表示逻辑从 Controller 移出放到一个新的对象里，即 View Model。  </p>
<p>基于 MVVM 设计思路，ViewModel 存在目的在于抽离 ViewController 中展示业务逻辑，而不是替代 ViewController，其它视图操作业务等还是应该放在 ViewController 中实现。</p>
<p>MVVM 框架中数据流向可以表示为 ViewModel -&gt; ViewController -&gt; View 。</p>
<ul>
<li>注意：ViewModel 既然不负责视图操作逻辑，ViewModel 中就不应该存在任何View对象，更不应该存在 Push/Present 等视图跳转逻辑。因此，ViewModel 中绝不应该存在任何视图操作相关的代码。同理View中也不该导入Model（但是这一点的确很难做到）。</li>
</ul>
<p><strong>view-model</strong> 一词的确不能充分表达我们的意图。 一个更好的术语可能是 “ View Coordinator ”(感谢<a href="https://twitter.com/kastiglione" target="_blank" rel="external">Dave Lee</a>提的这个 “View Coordinator” 术语, 真是个好点子)。你可以认为它就像是电视新闻主播背后的研究人员和作家团队。 它从必要的资源(数据库, 网络服务调用, 等)中获取原始数据, 运用逻辑, 并处理成 view (controller) 的展示数据. 它(通常通过属性)暴露给视图控制器需要知道的仅关于显示视图工作的信息(理想地你不会暴漏你的 data-model 对象)。 它还负责对上游数据的修改(比如更新模型/数据库, API POST 调用)。摘自<a href="http://yulingtianxia.com/blog/2015/05/21/ReactiveCocoa-and-MVVM-an-Introduction/" target="_blank" rel="external">《ReactiveCocoa 和 MVVM 入门》</a></p>
<h2 id="更适合项目业务的架构"><a href="#更适合项目业务的架构" class="headerlink" title="更适合项目业务的架构"></a>更适合项目业务的架构</h2><p><img src="/2017/08/03/探寻最适合业务的架构/iOS架构.png" alt="实验中到框架"></p>
<p>由于目前项目是按模块开发，从每个独立的功能模块考虑，单个模块适合 MVC 为基础，分离出网络层、界面拼装层、ViewModel 层、数据持久化层等等层次架构。减少 ViewController 中的代码，降低 View 和 Model 的耦合。</p>
<p>并且不会对现有的 MVC 架构产生大的影响，更多的是把 ViewController 中的代码分离到各个层中。</p>
<h3 id="网络请求层"><a href="#网络请求层" class="headerlink" title="网络请求层"></a>网络请求层</h3><p>网络请求层请求服务器转化成 Model 数据，再由 ViewModel 层处理成View需要的数据，通过 ViewController 传递给 View。</p>
<p>个人认为将一个网络请求封装成一个类会是完美的封装  </p>
<ul>
<li>自己管理自己的 URL</li>
<li>自己管理自己的错误码</li>
<li>验证服务器返回内容（数据类型验证）</li>
<li>缓存数据</li>
<li>More … …</li>
</ul>
<p>一个存粹网络请求类，不该在其中处理数据，将数据处理的过程放在 ViewModel 中，以降低与 Model 的耦合。</p>
<h3 id="界面拼装层"><a href="#界面拼装层" class="headerlink" title="界面拼装层"></a>界面拼装层</h3><p>构造专门的 UIView 的子类，来负责控件的拼装。不过稍微麻烦一些的是，需要把这些控件的事件回调先接管，再都一一暴露回 ViewController。</p>
<p>我希望的是 View 和 Model 能完全的分离，这样做的优势在于，ViewModel、Model 和网络请求可以最大限度的重用。假设有一天需要给我们的 iPhone 项目开发 iPad 版本，甚至 macOS 版本，那么我们可以预想到，我们只需重新布局界面，而展示的数据结构不会有大大变化，ViewModel、Model 和网络请求即可重用。</p>
<h3 id="ViewModel层"><a href="#ViewModel层" class="headerlink" title="ViewModel层"></a>ViewModel层</h3><p>View 只接受 ViewModel 处理完之后的数据，而 ViewController 只需要传递 ViewModel 处理后的数据。  </p>
<p>更多关于 ViewModel 介绍请查阅 <a href="https://objccn.io/issue-13-1/" target="_blank" rel="external">MVVM 介绍</a></p>
<h3 id="推送层"><a href="#推送层" class="headerlink" title="推送层"></a>推送层</h3><ul>
<li>APNS推送</li>
<li>Socket推送</li>
</ul>
<p>封装如下：  </p>
<ul>
<li>将推送的标识封装在一个头文件中，声明成全局常量。</li>
<li>将每个推送对应的操作封装在一个文件中，收到推送调用对应的方法。</li>
</ul>
<h3 id="数据持久化层"><a href="#数据持久化层" class="headerlink" title="数据持久化层"></a>数据持久化层</h3><p>若单个模块需要做数据存取，就将数据存取放在专门的类中处理。</p>
<h3 id="其他层"><a href="#其他层" class="headerlink" title="其他层"></a>其他层</h3><ul>
<li>模块中的全局常量</li>
<li>与其他模块通用类</li>
</ul>
<h2 id="一些有趣的思考"><a href="#一些有趣的思考" class="headerlink" title="一些有趣的思考"></a>一些有趣的思考</h2><h3 id="在什么地方发起网络请求的问题"><a href="#在什么地方发起网络请求的问题" class="headerlink" title="在什么地方发起网络请求的问题"></a>在什么地方发起网络请求的问题</h3><p>个人认为在ViewModel中发起请求会是一个不错的选中。</p>
<p>ViewController 向 ViewModel 提供请求所需放参数，在 ViewModel 中发起请求，转成 Model-Data，接管该数据处理成 View 需要的数据。</p>
<h3 id="列表数据的处理问题"><a href="#列表数据的处理问题" class="headerlink" title="列表数据的处理问题"></a>列表数据的处理问题</h3><p>MVC 的架构中在，从网络请求中获取列表数据，转换成模型数据 Array，再从 Array 中取出 Cell 对应的 Model 并赋值。这是我们通常的做法。</p>
<p>但是从本文 MVVM 框架图中可见，MVVM 架构 Model 只与 ViewModel 交互，并不会直接传递到 Viewcontroller，所以我能想到的一种做法，是给 Cell 创建对应的 CellViewModel ，tableView 生成  tableViewViewModel ，通过这些 ViewModel 给对应 View 赋值。</p>
<p>以此<code>JSON</code>数据为例，展示 MVC 与 MVVM 的区别：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">"Data": &#123;</div><div class="line">        "PageSize": 1,</div><div class="line">        "PageIndex": 2,</div><div class="line">        "TotalCount": 1,</div><div class="line">  	    "TotalAmount": [&#123;"Month": 1,</div><div class="line">					    "Total": "100"&#125;], 	 	</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>Model 在我看来更像是一种数据存储的格式。</p>
<p>将以上<code>JSON</code>数据转换成以下 Model 。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TotalAmountModel</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> month;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *total;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DataModel</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> pageSize;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> pageIndex;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> totalCount;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;TotalAmountModel *&gt; *totalAmount;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>通常在 MVC 中，我就习惯将 DataModel 直接抛给 ViewController ，所有的处理立即在 ViewController 完成。</p>
<p>MVVM 则是创建 DataViewModel 来处理成能直接赋值给 View 的数据。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TotalAmountViewModel</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *month;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *total;</div><div class="line">- (<span class="keyword">instancetype</span>)initWithModel:(TotalAmountModel *)model;</div><div class="line"><span class="keyword">@end</span></div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TotalAmountViewModel</span></span></div><div class="line">- (<span class="keyword">instancetype</span>)initWithModel:(TotalAmountModel *)model &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        _month = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%ld月兑换记录"</span>,(<span class="keyword">long</span>)model.month];</div><div class="line">        _total = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"合计：%@元"</span>,model.total];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">DataViewModel</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> pageSize;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> pageIndex;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> totalCount;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;TotalAmountViewModel *&gt; *totalAmount;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://www.infoq.com/cn/articles/rethinking-mvc-mvvm" target="_blank" rel="external">被误解的MVC和被神化的MVVM</a>   </li>
<li><a href="http://www.cocoachina.com/ios/20170710/19801.html" target="_blank" rel="external">MVVM与Controller瘦身实践</a>  </li>
<li><a href="http://www.jianshu.com/p/eedbc820d40a" target="_blank" rel="external">杂谈: MVC/MVP/MVVM</a>  </li>
<li><a href="http://www.cocoachina.com/ios/20170717/19884.html" target="_blank" rel="external">浅谈 MVC、MVP 和 MVVM 架构模式</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 软件架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MVC </tag>
            
            <tag> MVVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CocoaPod工作原理]]></title>
      <url>/2017/07/09/CocoaPod%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p><img src="/2017/07/09/CocoaPod工作原理/CocoaPod工作原理.png" alt="&quot;CocoaPod工作原理图解&quot;"><br><a id="more"></a></p>
]]></content>
      
        <categories>
            
            <category> 工具集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cocoapods </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OC和Swift的单例模式]]></title>
      <url>/2017/07/06/OC%E5%92%8CSwift%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="/2017/07/06/OC和Swift的单例模式/OC和Swift的单例模式.png" alt=""></p>
<a id="more"></a>
<p>单例模式是iOS开发中常用的设计模式，可以保证一个类只有一个对象实例。  </p>
<p>在Objective-C中单例常用的写法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Manager</span></span></div><div class="line">+ (<span class="keyword">instancetype</span>) shareManager &#123;</div><div class="line">    <span class="keyword">static</span> Manager* staticInstance = <span class="literal">nil</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        staticInstance = [[<span class="keyword">self</span> alloc] init];</div><div class="line">    &#125;) ;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> staticInstance;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>使用GCD中的dispatch_once_t可以保证里面的代码只被调用一次。  </p>
<p>在Swift 3.0 单例推荐写法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">Manager</span>()</div><div class="line">    <span class="keyword">private</span> <span class="keyword">init</span>()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>static在Swift中表示 “类型范围作用域”，可以使用它来定义类型存储属性，类中的static属性拥有全局作用域和懒加载属性。<br>private关键字在Swift中表示“私有”。</p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OC </tag>
            
            <tag> Swift </tag>
            
            <tag> 单例 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World,Goodbey HDU]]></title>
      <url>/2017/06/14/Hello-World-Goodby-HDU/</url>
      <content type="html"><![CDATA[<p><img src="/2017/06/14/Hello-World-Goodby-HDU/001.png" alt="&quot;我们毕业啦&quot;"><br><a id="more"></a><br>打算写这篇文章很久了，总在起笔时欲言又止，脑海晃过一个个画面，不知该从何说起。</p>
<p>不如，从头开始。  </p>
<p>我记得那是一个下雨的日子，江南常有的雨天，天真的少年就这样闯进了文一路的杭电。<br>也许大学是从梧桐树斑驳光影下的军训开始的，也许是从工字楼213五个人初见开始的，也许是从第一行C代码”Hello World”开始的。 </p>
<p>就在懵懵懂懂中开始了。</p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/003.png" alt="&quot;文一校区 梧桐树&quot;"></p>
<p>那时的东阳赌神还在炸金花，那时的柯桥富帅还没修学，那时的河北宗文帮我们搞定了很多代码，那时的河南蒲少爱上了页游。  </p>
<p>还有那个少年，他们叫他Hreo,他说他喜欢漫威里超级英雄Bumblebee。</p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/002.png" alt="&quot;赌神，你们为什么没有在一起？&quot;"> </p>
<p>大一。 </p>
<p>熙熙攘攘的社团，组团吃喝玩乐的文一路，度日如年的晚自习。<br>体育课上的太极十八式，马克思主义课上的小胖老师，点名考勤的红白卡。<br>学校对面重庆麻辣烫的阿姨，这一次葱蒜麻辣我都要。<br>沙县大酒店的蒸饺。<br>炸鸭腿饭的老板，加一瓶可乐。<br>还有到现在还不怎么会的C语言。 </p>
<p>你们都还在吗？</p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/004.png" alt="&quot;田北的支教时光&quot;"> </p>
<p>田北小学的孩子们，你们都长大了吗？</p>
<p>可那个少年还是一个孩子。</p>
<p>大二。</p>
<p>洋溢。<br>你好吗？<br>B支4依旧在文一和下沙之间穿梭。</p>
<p>人生是一场错过。</p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/006.png" alt="&quot;田北的支教时光&quot;"></p>
<p>西藏。<br>仓央嘉措和玛吉阿米的拉萨。</p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/009.png" alt="&quot;一个人需要隐藏多少秘密才能巧妙地度过一生&quot;"></p>
<p>曾虑多情损梵行，入山又恐别倾城。<br>世间安得双全法，不负如来不负卿。</p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/005.png" alt="&quot;纳木措&quot;"></p>
<p>大三。 </p>
<p>王大全老师，您的又大又全理论我想我能理解。<br>谢谢您带我领略软件工程的工程思维。<br>您的面壁蹲墙功我不会忘。<br>愿您，好好的。<br>相信师母，已变成了天使，从此没有忧伤。</p>
<p>实验室里的翔哥，耐心的讲解着OC代码。</p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/007.png" alt="&quot;回不去了&quot;"></p>
<p>WANG：你为什么要写iOS项目交作业。<br>ME：我就喜欢。<br>王老师我这回答你可满意？<br>从此走上了iOS Developer的不归路。  </p>
<p>美国。<br>纽约。波士顿。奥兰多。迈阿密。洛杉矶。</p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/010.png" alt="&quot;Key West, Florida&quot;"></p>
<p>大四。</p>
<p>代码。毕设。离别。实习。租房。Goodbey HDU。  </p>
<p>各奔东西的我们。<br>赌神回了东阳，混进了农行。<br>宗文放弃了读研，交了女朋友留在杭州写代码。<br>蒲少，还没来不得及问你志在何方。<br>富帅已经回来，最后一次见他，是在寝室打游戏。<br>Fight吧，少年们，用力活着用力爱哪怕肝脑涂地。      </p>
<p>还有。<br>敬爱青云书记，小胡子同学。<br>戴逗，涛哥，小董三人组。<br>耀卓，逗逗，鲜花。勇勇，奕廷。<br>离开计算机专业后的向宇，是否已经实现了你的梦想。<br>再见了，少年们，说了再见还会再见的吧。    </p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/008.png" alt="&quot;都知欢聚最难得，难奈别离多&quot;"></p>
<p>那个少年。  </p>
<p>许多年前，有一双清澈的双眼。<br>想看遍这世界，去最遥远的远方。<br>感觉有双翅膀，能飞越高山和海洋。<br>爱上一个人，就不怕付出自己一生。<br>相信爱会永恒，相信每个陌生人。  </p>
<p>当我和世界初相见，当我曾经是少年。  </p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26508186&auto=1&height=66"></iframe>
]]></content>
      
        <categories>
            
            <category> 所有的酒 都不如你 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> School </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
