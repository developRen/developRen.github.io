<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[OC 常量]]></title>
      <url>/2017/09/18/OC%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<p><img src="/2017/09/18/OC常量与变量/OC常量与变量.png" alt=""> </p>
<a id="more"></a>
<h2 id="全局常量的常见用法"><a href="#全局常量的常见用法" class="headerlink" title="全局常量的常见用法"></a>全局常量的常见用法</h2><p>通过 <code>FOUNDATION_EXPORT</code> 定义全局常量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// .h文件</div><div class="line">FOUNDATION_EXPORT NSString * const AFNetworkingReachabilityNotificationStatusItem;</div><div class="line"></div><div class="line">// .m文件</div><div class="line">NSString * const AFNetworkingReachabilityDidChangeNotification = @&quot;com.alamofire.networking.reachability.change&quot;;</div></pre></td></tr></table></figure>
<p>通过 <code>extern</code> 和 <code>const</code> 定义全局常量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// .h文件</div><div class="line">extern NSString * const YLConstApplyResultForRefuseIcon;</div><div class="line"></div><div class="line">// .m文件</div><div class="line">NSString * const YLConstApplyResultForRefuseIcon = @&quot;approval-refuse&quot;;</div></pre></td></tr></table></figure>
<h2 id="局部常量的常见用法"><a href="#局部常量的常见用法" class="headerlink" title="局部常量的常见用法"></a>局部常量的常见用法</h2><p>方法内的常量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 保证局部变量永远只初始化一次，在程序的运行过程中永远只有一份内存</div><div class="line">static XYGCDAsyncSocketManager *staticInstance = nil;</div><div class="line">static dispatch_once_t onceToken;</div></pre></td></tr></table></figure>
<p>方法体外，类内部使用的常量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static NSString * const kAFMultipartFormCRLF = @&quot;\r\n&quot;;</div></pre></td></tr></table></figure>
<h2 id="const修饰符说明"><a href="#const修饰符说明" class="headerlink" title="const修饰符说明"></a>const修饰符说明</h2><ul>
<li>const用来修饰右边的基本变量或指针变量</li>
<li>被修饰的变量只读，不能被修改</li>
</ul>
<h2 id="static修饰符说明"><a href="#static修饰符说明" class="headerlink" title="static修饰符说明"></a>static修饰符说明</h2><p>修饰局部变量:   </p>
<ul>
<li>在方法体内，声明为静态的变量（局部静态变量）。保证局部变量永远只初始化一次，在程序的运行过程中永远只有一份内存，生命周期类似全局变量了，但是作用域不变。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 单例</div><div class="line">+ (nonnull instancetype)sharedInstance &#123;</div><div class="line">    static XYGCDAsyncSocketManager *staticInstance = nil;</div><div class="line">    </div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        staticInstance = [[self alloc] init];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    return staticInstance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在方法体外，类内部使用的常量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static NSString * const kAFMultipartFormCRLF = @&quot;\r\n&quot;;</div></pre></td></tr></table></figure>
<h2 id="extern修饰符说明"><a href="#extern修饰符说明" class="headerlink" title="extern修饰符说明"></a>extern修饰符说明</h2><ul>
<li>声明外部全局变量,这里需要特别注意extern只能声明，不能用于实现。</li>
</ul>
<h2 id="FOUNDATION-EXPORT-与-＃define"><a href="#FOUNDATION-EXPORT-与-＃define" class="headerlink" title="FOUNDATION_EXPORT 与 ＃define"></a>FOUNDATION_EXPORT 与 ＃define</h2><p><code>FOUNDATION_EXPORT</code> 与 <code>＃define</code> 都可以用来定义常量的。</p>
<p><code>FOUNDATION_EXPORT</code> 定义的常量可以直接使用 <code>myString == MyFirstConstant</code> 来比较, 而 <code>define</code> 则使用的是 <code>[myString isEqualToString:MyFirstContant]</code> 。</p>
<ul>
<li><code>FOUNDATION_EXPORT</code> 是直接比较指针地址。</li>
<li><code>define</code> 则是一一比较字符串的每一个字符是否相等。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OC </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我说所有的酒 都不如你]]></title>
      <url>/2017/08/16/%E6%88%91%E8%AF%B4%E6%89%80%E6%9C%89%E7%9A%84%E9%85%92-%E9%83%BD%E4%B8%8D%E5%A6%82%E4%BD%A0/</url>
      <content type="html"><![CDATA[<p><img src="/2017/08/16/我说所有的酒-都不如你/0001.png" alt=""></p>
<a id="more"></a>
<h3 id="《春风十里》"><a href="#《春风十里》" class="headerlink" title="《春风十里》"></a>《春风十里》</h3><p>– 鹿先生乐队  </p>
<p>我在二环路的里边 想着你<br>你在远方的山上 春风十里<br>今天的风吹向你 下了雨<br>我说所有的酒 都不如你  </p>
<p>我在鼓楼的夜色中 为你唱花香自来<br>在别处 沉默相遇和期待<br>飞机飞过 车水马龙的城市<br>千里之外 不离开  </p>
<p>把所有的春天 都揉进了一个清晨<br>把所有停不下的言语变成秘密 关上了门<br>莫名的的情愫啊 请问 谁来将它带走呢<br>只好把岁月化成歌 留在山河  </p>
]]></content>
      
        <categories>
            
            <category> 所有的酒 都不如你 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 春风十里 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[AFNetworking 源码阅读笔记]]></title>
      <url>/2017/08/08/AFNetworking-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>提高代码水平最有效的方式就是阅读各路大神的代码<br>公认AFNetworking在iOS界就像是神一般的存在<br>在多次蠢蠢欲动后开始了阅读AFNetworking框架的计划  </p>
<p>笔记如下，持续更新</p>
<p><img src="/2017/08/08/AFNetworking-阅读笔记/AFNetworking.png" alt=""> </p>
<a id="more"></a>
<h2 id="框架中用到的一些宏"><a href="#框架中用到的一些宏" class="headerlink" title="框架中用到的一些宏"></a>框架中用到的一些宏</h2><h3 id="DEPRECATED-ATTRIBUTE"><a href="#DEPRECATED-ATTRIBUTE" class="headerlink" title="DEPRECATED_ATTRIBUTE"></a><code>DEPRECATED_ATTRIBUTE</code></h3><p>在声明属性或者方法时，在后面加上 <code>DEPRECATED_ATTRIBUTE</code>，可以用来标识该方法将会被慢慢弃用属性或接口的，当我们不想让别人再用这属性或接口时，可以加上这个宏，如果别人仍然调用，则编译器会报警告。  </p>
<p>此宏常用于框架迭代时，新旧方法和属性替换的过渡阶段。 （⚠️ 必需放在”;”前）</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// AFNetworking 3.0 框架中即将被弃用的POST请求</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSURLSessionDataTask</span> *)POST:(<span class="built_in">NSString</span> *)URLString</div><div class="line">                    parameters:(<span class="keyword">nullable</span> <span class="keyword">id</span>)parameters</div><div class="line">                       success:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionDataTask</span> *task, <span class="keyword">id</span> _Nullable responseObject))success</div><div class="line">                       failure:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> *error))failure DEPRECATED_ATTRIBUTE;</div><div class="line">                       </div><div class="line"><span class="comment">// 在属性声明时加入 DEPRECATED_ATTRIBUTE 表明此属性将会被弃用                      </span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>) <span class="built_in">NSURL</span> *baseURL DEPRECATED_ATTRIBUTE;</div></pre></td></tr></table></figure>
<h3 id="NS-DESIGNATED-INITIALIZER"><a href="#NS-DESIGNATED-INITIALIZER" class="headerlink" title="NS_DESIGNATED_INITIALIZER"></a><code>NS_DESIGNATED_INITIALIZER</code></h3><p>此宏的意思是最终被指定的初始化方法，在一个类的<code>interface</code>中只能用一次，而且必须是以<code>init</code>开头的方法。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// UIContentContainer通过xib初始化实例对象</span></div><div class="line">- (<span class="keyword">instancetype</span>)initWithNibName:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)nibNameOrNil bundle:(<span class="keyword">nullable</span> <span class="built_in">NSBundle</span> *)nibBundleOrNil <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</div></pre></td></tr></table></figure>
<h3 id="NS-ASSUME-NONNULL-BEGIN-与-NS-ASSUME-NONNULL-END"><a href="#NS-ASSUME-NONNULL-BEGIN-与-NS-ASSUME-NONNULL-END" class="headerlink" title="NS_ASSUME_NONNULL_BEGIN 与 NS_ASSUME_NONNULL_END"></a><code>NS_ASSUME_NONNULL_BEGIN</code> 与 <code>NS_ASSUME_NONNULL_END</code></h3><p>请看<a href="#nullable和nonnull"><code>nullable</code> 和 <code>nonnull</code> </a>  </p>
<p> <span id="FOUNDATION_EXPORT"></span></p>
<h3 id="FOUNDATION-EXPORT"><a href="#FOUNDATION-EXPORT" class="headerlink" title="FOUNDATION_EXPORT"></a><code>FOUNDATION_EXPORT</code></h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FOUNDATION_EXPORT <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingReachabilityNotificationStatusItem;</div></pre></td></tr></table></figure>
<p><code>FOUNDATION_EXPORT</code>与 <code>＃define</code>都可以用来定义常量的。</p>
<p><code>FOUNDATION_EXPORT</code>定义的常量可以直接使用(myString == MyFirstConstant)来比较, 而<code>define</code>则使用的是([myString isEqualToString:MyFirstContant])。  </p>
<ul>
<li><code>FOUNDATION_EXPORT</code>是直接比较指针地址。   </li>
<li><code>define</code>则是一一比较字符串的每一个字符是否相等。</li>
</ul>
<p>更多常量说明请查阅<a href="#关于全局常量">关于全局常量</a></p>
<h3 id="NS-UNAVAILABLE"><a href="#NS-UNAVAILABLE" class="headerlink" title="NS_UNAVAILABLE"></a><code>NS_UNAVAILABLE</code></h3><p>告诉编译器方法不可用，如果使用了就会编译失败，提示错误。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)init <span class="built_in">NS_UNAVAILABLE</span>;</div></pre></td></tr></table></figure>
<h3 id="Require-Quiet-和-Require-noErr-Quiet"><a href="#Require-Quiet-和-Require-noErr-Quiet" class="headerlink" title="__Require_Quiet 和 __Require_noErr_Quiet"></a><code>__Require_Quiet</code> 和 <code>__Require_noErr_Quiet</code></h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">id</span> AFPublicKeyForCertificate(<span class="built_in">NSData</span> *certificate) &#123;</div><div class="line">    <span class="keyword">id</span> allowedPublicKey = <span class="literal">nil</span>;</div><div class="line">    SecCertificateRef allowedCertificate;</div><div class="line">    SecPolicyRef policy = <span class="literal">nil</span>;</div><div class="line">    SecTrustRef allowedTrust = <span class="literal">nil</span>;</div><div class="line">    SecTrustResultType result;</div><div class="line"></div><div class="line">    allowedCertificate = SecCertificateCreateWithData(<span class="literal">NULL</span>, (__bridge <span class="built_in">CFDataRef</span>)certificate);</div><div class="line">    __Require_Quiet(allowedCertificate != <span class="literal">NULL</span>, _<span class="keyword">out</span>);</div><div class="line"></div><div class="line">    policy = SecPolicyCreateBasicX509();</div><div class="line">    __Require_noErr_Quiet(SecTrustCreateWithCertificates(allowedCertificate, policy, &amp;allowedTrust), _<span class="keyword">out</span>);</div><div class="line">    __Require_noErr_Quiet(SecTrustEvaluate(allowedTrust, &amp;result), _<span class="keyword">out</span>);</div><div class="line"></div><div class="line">    allowedPublicKey = (__bridge_transfer <span class="keyword">id</span>)SecTrustCopyPublicKey(allowedTrust);</div><div class="line"></div><div class="line">_<span class="keyword">out</span>:</div><div class="line">    <span class="keyword">if</span> (allowedTrust) &#123;</div><div class="line">        <span class="built_in">CFRelease</span>(allowedTrust);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (policy) &#123;</div><div class="line">        <span class="built_in">CFRelease</span>(policy);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (allowedCertificate) &#123;</div><div class="line">        <span class="built_in">CFRelease</span>(allowedCertificate);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> allowedPublicKey;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>__Require_Quiet</code>可以看出这个宏的用途是：当条件返回false时，执行标记以后的代码。<br><code>__Require_noErr_Quiet</code>可以看出这个宏的用途是：当条件抛出异常时，执行标记以后的代码。</p>
<h2 id="nullable-和-nonnull"><a href="#nullable-和-nonnull" class="headerlink" title="nullable 和 nonnull"></a><code>nullable</code> 和 <code>nonnull</code></h2><p>从字面上我们可以猜到，<code>nullable</code>表示对象可以是<code>NULL</code>或<code>nil</code>，而<code>nonnull</code>表示对象不应该为空。当我们不遵循这一规则时，编译器就会给出警告。 </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 属性声明的三种修饰方式</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>, <span class="keyword">nullable</span>) <span class="built_in">NSURL</span> * baseURL;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSURL</span> * _Nullable baseURL;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSURL</span> * __<span class="keyword">nullable</span> baseURL;</div><div class="line"></div><div class="line"><span class="comment">// 方法返回值与方法参数时修饰</span></div><div class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSURLSessionDataTask</span> *)GET:(<span class="built_in">NSString</span> *)URLString</div><div class="line">                            parameters:(<span class="keyword">nullable</span> <span class="keyword">id</span>)parameters</div><div class="line">                              progress:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSProgress</span> *downloadProgress))downloadProgress</div><div class="line">                               success:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionDataTask</span> *task, <span class="keyword">id</span> _Nullable responseObject))success</div><div class="line">                               failure:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> *error))failure;</div></pre></td></tr></table></figure>
<p>而对于 双指针类型对象 、 <code>Block</code> 的返回值 、 <code>Block</code> 的参数 等，这时候就不能用 <code>nonnull/nullable</code> 修饰，只能用带下划线的 <code>__nonnull/__nullable</code> 或者 <code>_Nonnull/_Nullable</code>。</p>
<p>在AFNetworking框架中可见  </p>
<ul>
<li>属性、方法返回值、方法参数的修饰，使用： <code>nonnull/nullable</code></li>
<li>Block 的参数、Block 返回值的修饰，使用： <code>_Nonnull/_Nullable</code></li>
</ul>
<p><span id="nullable和nonnull"></span></p>
<p>如果需要每个属性或每个方法都去指定 <code>nonnull</code> 和 <code>nullable</code> ，将是一件非常繁琐的事。苹果为了减轻我们的工作量，专门提供了两个宏： <code>NS_ASSUME_NONNULL_BEGIN</code> 和 <code>NS_ASSUME_NONNULL_END</code> 。在这两个宏之间的代码，所有简单指针对象都被假定为 <code>nonnull</code> ，因此我们只需要去指定那些 <code>nullable</code> 指针对象即可。AFNetworking框架中做了如此的操作。</p>
<p><a href="http://blog.csdn.net/bravegogo/article/details/52458403" target="_blank" rel="external"><code>nullable</code>、<code>__nullable</code>、<code>_Nullable</code> 究竟有什么区别呢？</a></p>
<h2 id="amp-与"><a href="#amp-与" class="headerlink" title="&amp; 与 @"></a><code>&amp;</code> 与 <code>@</code></h2><ul>
<li><code>&amp;</code> 表示取地址的意思，和C语言一样</li>
<li><code>@</code> 表示字面量</li>
</ul>
<p><a href="http://www.jianshu.com/p/e89bd39e4849" target="_blank" rel="external">ios中的字面量语法</a></p>
<h2 id="name和-pragma-mark"><a href="#name和-pragma-mark" class="headerlink" title="@name和 #pragma mark"></a><code>@name</code>和 <code>#pragma mark</code></h2><p><code>AFNetworking</code>作者使用了<code>@name</code>来分隔 <code>.h</code> 文件中中不同功能代码。在 <code>.m</code> 文件中用<code>#pragma mark</code>分隔不同功能代码。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///---------------------</span></div><div class="line"><span class="comment">/// @name Initialization</span></div><div class="line"><span class="comment">///---------------------</span></div><div class="line"></div><div class="line"><span class="meta">#pragma mark - NSCopying</span></div></pre></td></tr></table></figure>
<h2 id="pragma-clang-diagnostic-ignored-用法"><a href="#pragma-clang-diagnostic-ignored-用法" class="headerlink" title="#pragma clang diagnostic ignored 用法"></a><code>#pragma clang diagnostic ignored</code> 用法</h2><p>首先, #pragma 本质上也是声明，一般常用的功能就是打注释、尤其是分段注释,但是#pragma 另外一个强大的功能就是处理编译器警告，用的时候可能就没上一个,功能用的那么多，在代码中处理警告却是极其高效的方法。</p>
<p>其中 clang diagnostic 便是#pragma 第一个功能常用的命令，步骤如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#pragma clang diagnostic push  </div><div class="line">#pragma clang diagnostic ignored &quot;-相关命令&quot;  </div><div class="line">// 你自己的代码  </div><div class="line">#pragma clang diagnostic pop</div></pre></td></tr></table></figure>
<p>常用 “-相关命令”  :</p>
<ul>
<li>方法弃用告警 “-Wdeprecated-declarations”  </li>
<li>不兼容指针类型 “-Wincompatible-pointer-types”  </li>
<li>循环引用 “-Warc-retain-cycles”  </li>
<li>未使用变量 “-Wunused-variable”     </li>
</ul>
<p><a href="http://clang.llvm.org/docs/UsersManual.html#diagnostics_pragma
s" target="_blank" rel="external">“-相关命令” 列表</a><br><a href="http://nshipster.cn/pragma/" target="_blank" rel="external">#pragma</a></p>
<p><span id="关于全局常量"></span></p>
<h2 id="关于全局常量"><a href="#关于全局常量" class="headerlink" title="关于全局常量"></a>关于全局常量</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// .h</span></div><div class="line"></div><div class="line"><span class="comment">///--------------------</span></div><div class="line"><span class="comment">/// @name Notifications</span></div><div class="line"><span class="comment">///--------------------</span></div><div class="line"></div><div class="line">FOUNDATION_EXPORT <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingReachabilityDidChangeNotification;</div><div class="line">FOUNDATION_EXPORT <span class="built_in">NSString</span> * <span class="keyword">const</span> AFNetworkingReachabilityNotificationStatusItem;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// .m</div><div class="line">NSString * const AFNetworkingReachabilityDidChangeNotification = @&quot;com.alamofire.networking.reachability.change&quot;;</div><div class="line">NSString * const AFNetworkingReachabilityNotificationStatusItem = @&quot;AFNetworkingReachabilityNotificationStatusItem&quot;;</div></pre></td></tr></table></figure>
<p>AFNetworking框架中通知的字符串封装到发通知的文件中（AFNetworkReachabilityManager类），同时在文件内部按不同模块进行区分。</p>
<p>通知的字符串的声明在.h 赋值在.m中，可以防止在.h中被修改。</p>
<p> 仔细看通知的字符串的命名。可以发现</p>
<ul>
<li>类名 + 业务相关（动词） + Notification </li>
<li>类名 + Notification + 业务相关（名词）</li>
</ul>
<p><a href="#FOUNDATION_EXPORT"><code>FOUNDATION_EXPORT</code> </a> 的用法请查看<code>框架中用到的一些宏</code>模块。<br><a href="http://blog.csdn.net/qq_32010299/article/details/51836806" target="_blank" rel="external">关于FOUNDATION_EXTERN、extern、FOUNDATION_EXPORT、extern “C”的区别</a></p>
<p>通常会写一个方法通过<code>枚举</code>和<code>switch</code>返回对应的字符串，在<code>AFNetworking</code>框架中看到一种骚气的操作。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 在.h声明</span></div><div class="line">FOUNDATION_EXPORT <span class="built_in">NSString</span> * AFStringFromNetworkReachabilityStatus(AFNetworkReachabilityStatus status);</div><div class="line"></div><div class="line"><span class="comment">// 在.m实现</span></div><div class="line"><span class="built_in">NSString</span> * AFStringFromNetworkReachabilityStatus(AFNetworkReachabilityStatus status) &#123;</div><div class="line">    <span class="keyword">switch</span> (status) &#123;</div><div class="line">        <span class="keyword">case</span> AFNetworkReachabilityStatusNotReachable:</div><div class="line">            <span class="keyword">return</span> <span class="built_in">NSLocalizedStringFromTable</span>(<span class="string">@"Not Reachable"</span>, <span class="string">@"AFNetworking"</span>, <span class="literal">nil</span>);</div><div class="line">        <span class="keyword">case</span> AFNetworkReachabilityStatusReachableViaWWAN:</div><div class="line">            <span class="keyword">return</span> <span class="built_in">NSLocalizedStringFromTable</span>(<span class="string">@"Reachable via WWAN"</span>, <span class="string">@"AFNetworking"</span>, <span class="literal">nil</span>);</div><div class="line">        <span class="keyword">case</span> AFNetworkReachabilityStatusReachableViaWiFi:</div><div class="line">            <span class="keyword">return</span> <span class="built_in">NSLocalizedStringFromTable</span>(<span class="string">@"Reachable via WiFi"</span>, <span class="string">@"AFNetworking"</span>, <span class="literal">nil</span>);</div><div class="line">        <span class="keyword">case</span> AFNetworkReachabilityStatusUnknown:</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            <span class="keyword">return</span> <span class="built_in">NSLocalizedStringFromTable</span>(<span class="string">@"Unknown"</span>, <span class="string">@"AFNetworking"</span>, <span class="literal">nil</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 调用</span></div><div class="line">AFStringFromNetworkReachabilityStatus(<span class="keyword">self</span>.networkReachabilityStatus);</div></pre></td></tr></table></figure>
<p><a href="http://www.jianshu.com/p/064b5b82a3a2" target="_blank" rel="external">iOS常量(const)、enum、宏(#define)的使用场景及区别</a></p>
<h2 id="关于局部常量"><a href="#关于局部常量" class="headerlink" title="关于局部常量"></a>关于局部常量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static NSUInteger const batchSize = 50;</div></pre></td></tr></table></figure>
<h2 id="本地化"><a href="#本地化" class="headerlink" title="本地化"></a>本地化</h2><p>TO-DO </p>
<h2 id="类中的私有方法"><a href="#类中的私有方法" class="headerlink" title="类中的私有方法"></a>类中的私有方法</h2><p>在AFNetworking框架中把私有方法写成<code>static void funcName()</code> 这样的<code>C函数</code>，并且写在<code>@interface</code>上方。</p>
<ul>
<li>写在在文件的最前方，比较容易查找</li>
<li>可以适当的使用内联函数，提高效率。</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> AFPostReachabilityStatusChange(<span class="built_in">SCNetworkReachabilityFlags</span> flags, AFNetworkReachabilityStatusBlock block) &#123;</div><div class="line">    AFNetworkReachabilityStatus status = AFNetworkReachabilityStatusForFlags(flags);</div><div class="line">    <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</div><div class="line">        <span class="keyword">if</span> (block) &#123;</div><div class="line">            block(status);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">NSNotificationCenter</span> *notificationCenter = [<span class="built_in">NSNotificationCenter</span> defaultCenter];</div><div class="line">        <span class="built_in">NSDictionary</span> *userInfo = @&#123; AFNetworkingReachabilityNotificationStatusItem: @(status) &#125;;</div><div class="line">        [notificationCenter postNotificationName:AFNetworkingReachabilityDidChangeNotification object:<span class="literal">nil</span> userInfo:userInfo];</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ifdef-ifndef-if-else-endif"><a href="#ifdef-ifndef-if-else-endif" class="headerlink" title="#ifdef #ifndef #if #else #endif"></a>#ifdef #ifndef #if #else #endif</h2><p><a href="http://blog.csdn.net/wwwang89123/article/details/17436577" target="_blank" rel="external">Objective–C语言预处理命令之条件编译（#ifdef,#else,#endif,#if等）</a>  </p>
<p>当必须要对条件进行判断的时候，我们有下边几种方案了</p>
<ul>
<li><code>#ifdef</code> 这个是编译特性</li>
<li><code>if else</code> 代码层次的判断</li>
<li><code>__Require_XXX</code> 宏</li>
</ul>
<h2 id="continue、break、return的区别"><a href="#continue、break、return的区别" class="headerlink" title="continue、break、return的区别"></a>continue、break、return的区别</h2><ul>
<li><code>break</code><br>  多用于循环语句，如<code>for</code>、<code>while</code> 、<code>switch</code>。当程序执行到<code>break</code>时在循环中表示结束整个循环,而且在多层嵌套中，一个break只能跳出一层循环。</li>
<li><code>continue</code><br>  用于在循环体中进行跳转，当程序执行到continue时，表示忽略其后面的代码（或者说结束本次循环），继续执行下一次循环。  </li>
<li><code>return</code><br>  表示从被调函数返回到主调函数继续执行，返回时可附带一个返回值，由return后面的参数指定。      </li>
</ul>
<h2 id="HTTPS和HTTP"><a href="#HTTPS和HTTP" class="headerlink" title="HTTPS和HTTP"></a>HTTPS和HTTP</h2><p><a href="http://www.jianshu.com/p/650ad90bf563" target="_blank" rel="external">简单粗暴系列之HTTPS原理</a><br><a href="http://www.jianshu.com/p/5969bbb4af9f" target="_blank" rel="external">别说你会AFNetworking3.0/NSURLSession</a><br><a href="http://www.jianshu.com/p/4102b817ff2f" target="_blank" rel="external">正确使用AFNetworking的SSL保证网络安全</a><br><a href="http://www.jianshu.com/p/a9bca62d8dab" target="_blank" rel="external">与时俱进，HTTP/2下的iOS网络层架构设计</a><br><a href="http://www.jianshu.com/p/9c1979ef2a70" target="_blank" rel="external">移动基础设施的建设</a></p>
<h2 id="NSSecureCoding"><a href="#NSSecureCoding" class="headerlink" title="NSSecureCoding"></a>NSSecureCoding</h2><p><a href="http://blog.jobbole.com/67655/" target="_blank" rel="external">使用NSSecureCoding协议进行对象编解码</a></p>
<h2 id="NSCopying"><a href="#NSCopying" class="headerlink" title="NSCopying"></a>NSCopying</h2><p><a href="http://www.jianshu.com/p/e98e6e30ebda" target="_blank" rel="external">iOS中几个常用协议（一）NSCopying/NSMutableCopying</a>  </p>
<p>未完待续…</p>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OC </tag>
            
            <tag> AFNetworking </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[循环引用的坑]]></title>
      <url>/2017/08/07/%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>循环引用是iOS开发中经常遇到的问题，对App有潜在的危害，会使引起内存消耗过高，性能变差和Crash等问题。<br><a id="more"></a></p>
<h2 id="Delegate"><a href="#Delegate" class="headerlink" title="Delegate"></a>Delegate</h2><p>代理协议是一个最典型的场景，需要你使用弱引用来避免循环引用。ARC时代，需要将代理声明为weak是一个即好又安全的做法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, weak) id &lt;myDelegate&gt; delegate;</div></pre></td></tr></table></figure>
<h2 id="NSTimer"><a href="#NSTimer" class="headerlink" title="NSTimer"></a>NSTimer</h2><p>在退出控制器时关闭计时器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    _timer = [NSTimer scheduledTimerWithTimeInterval:0.1</div><div class="line">                                              target:self</div><div class="line">                                            selector:@selector(p_doSomeThing)</div><div class="line">                                            userInfo:nil</div><div class="line">                                             repeats:YES];</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)p_doSomeThing &#123;</div><div class="line">    // doSomeThing</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)p_stopDoSomeThing &#123;</div><div class="line">    [self.timer invalidate];</div><div class="line">    self.timer = nil;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)dealloc &#123;</div><div class="line">     [self.timer invalidate];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h2><p>采用weakSelf，内部不会有强类型的指针，就可以解决循环引用问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">__weak __typeof(self) weakSelf = self;</div><div class="line">self.callbackBlock = ^&#123;</div><div class="line">  [weakSelf doSomething];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h2 id="其他内存问题"><a href="#其他内存问题" class="headerlink" title="其他内存问题"></a>其他内存问题</h2><ul>
<li><p>NSNotification addObserver之后，记得在dealloc里面添加remove;</p>
</li>
<li><p>动画的repeat count无限大，而且也不主动停止动画，基本就等于无限循环了;</p>
</li>
<li><p>forwardingTargetForSelector返回了self。</p>
</li>
</ul>
<h2 id="内存解决思路："><a href="#内存解决思路：" class="headerlink" title="内存解决思路："></a>内存解决思路：</h2><ul>
<li><p>通过Instruments来查看leaks</p>
</li>
<li><p>集成Facebook开源的FBRetainCycleDetector</p>
</li>
<li><p>集成MLeaksFinder</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Objective-C </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OC </tag>
            
            <tag> 循环引用 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[探寻最适合业务的架构]]></title>
      <url>/2017/08/03/%E6%8E%A2%E5%AF%BB%E6%9C%80%E9%80%82%E5%90%88%E4%B8%9A%E5%8A%A1%E7%9A%84%E6%9E%B6%E6%9E%84/</url>
      <content type="html"><![CDATA[<h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>在 iOS 开发中，MVC（Model View Controller）是构建iOS App的标准模式，是苹果推荐的一个用来组织代码的权威范式。</p>
<p><img src="/2017/08/03/探寻最适合业务的架构/MVC框架.png" alt="MVC框架"> </p>
<a id="more"></a>
<p>所谓的 MVC 是指：  </p>
<ul>
<li>Model: 数据的拥有者，实现具体的业务逻辑。  </li>
<li>View: 具体的用户界面。  </li>
<li>Controller: 负责将 View 中用户的动作传达给 Model，将 Model 的数据通过 View 展现出来。   </li>
</ul>
<h3 id="关于Controller的臃肿问题"><a href="#关于Controller的臃肿问题" class="headerlink" title="关于Controller的臃肿问题"></a>关于Controller的臃肿问题</h3><p>Controller 里面就只应该存放这些不能复用的代码，这些代码包括：  </p>
<ul>
<li>在初始化时，构造相应的 View 和 Model。  </li>
<li>监听 Model 层的事件，将 Model 层的数据传递到 View 层。  </li>
<li>监听 View 层的事件，并且将 View 层的事件转发到 Model 层。  </li>
</ul>
<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p><img src="/2017/08/03/探寻最适合业务的架构/MVVM框架.png" alt="MVVM框架">   </p>
<p>如图：MVVM 框架是 MVC 的增强版，我们正式连接了视图和控制器，并将表示逻辑从 Controller 移出放到一个新的对象里，即 View Model。  </p>
<p>基于 MVVM 设计思路，ViewModel 存在目的在于抽离 ViewController 中展示业务逻辑，而不是替代 ViewController，其它视图操作业务等还是应该放在 ViewController 中实现。</p>
<p>MVVM 框架中数据流向可以表示为 ViewModel -&gt; ViewController -&gt; View 。</p>
<ul>
<li>注意：ViewModel 既然不负责视图操作逻辑，ViewModel 中就不应该存在任何View对象，更不应该存在 Push/Present 等视图跳转逻辑。因此，ViewModel 中绝不应该存在任何视图操作相关的代码。</li>
</ul>
<h2 id="更适合项目业务的架构"><a href="#更适合项目业务的架构" class="headerlink" title="更适合项目业务的架构"></a>更适合项目业务的架构</h2><p><img src="/2017/08/03/探寻最适合业务的架构/iOS架构.png" alt="实验中到框架"></p>
<p>由于目前项目是按模块开发，从每个独立的功能模块考虑，单个模块适合 MVC 为基础，分离出网络层、界面拼装层、ViewModel 层、数据持久化层等等层次架构。减少 ViewController 中的代码，降低 View 和 Model 的耦合。</p>
<p>并且不会对现有的 MVC 架构产生大的影响，更多的是把 ViewController 中的代码分离到各个层中。</p>
<h3 id="网络请求层"><a href="#网络请求层" class="headerlink" title="网络请求层"></a>网络请求层</h3><p>由 ViewController 发起网络请求，网络请求层请求服务器，再由 ViewModel 层处理成ViewController需要的数据。</p>
<p>单个模块中的网络请求层封装如下：  </p>
<ul>
<li>将URL通过宏封装在一个头文件中。</li>
<li>将模块中的所有网络请求封装在一个类中。</li>
</ul>
<p>更多网络请求封装、错误处理、网络状态判读请查阅另一篇文章 <a href="">AFNetwork封装</a></p>
<h3 id="界面拼装层"><a href="#界面拼装层" class="headerlink" title="界面拼装层"></a>界面拼装层</h3><p>构造专门的 UIView 的子类，来负责控件的拼装。不过稍微麻烦一些的是，需要把这些控件的事件回调先接管，再都一一暴露回 ViewController。</p>
<h3 id="ViewModel层"><a href="#ViewModel层" class="headerlink" title="ViewModel层"></a>ViewModel层</h3><p>View 只接受 ViewModel 处理完之后的数据，而 ViewController 只需要传递 ViewModel 处理后的数据。  </p>
<p>更多关于 ViewModel 介绍请查阅 <a href="https://objccn.io/issue-13-1/" target="_blank" rel="external">MVVM 介绍</a></p>
<h3 id="推送层"><a href="#推送层" class="headerlink" title="推送层"></a>推送层</h3><ul>
<li>APNS推送</li>
<li>Socket推送</li>
</ul>
<p>封装如下：  </p>
<ul>
<li>将推送的标识封装在一个头文件中，声明成全局常量。</li>
<li>将每个推送对应的操作封装在一个文件中，收到推送调用对应的方法。</li>
</ul>
<h3 id="数据持久化层"><a href="#数据持久化层" class="headerlink" title="数据持久化层"></a>数据持久化层</h3><p>若单个模块需要做数据存取，就将数据存取放在专门的类中处理。</p>
<h3 id="其他层"><a href="#其他层" class="headerlink" title="其他层"></a>其他层</h3><ul>
<li>模块中的全局常量</li>
<li>与其他模块通用类</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://www.infoq.com/cn/articles/rethinking-mvc-mvvm" target="_blank" rel="external">被误解的MVC和被神化的MVVM</a>   </li>
<li><a href="http://www.cocoachina.com/ios/20170710/19801.html" target="_blank" rel="external">MVVM与Controller瘦身实践</a>  </li>
<li><a href="http://www.jianshu.com/p/eedbc820d40a" target="_blank" rel="external">杂谈: MVC/MVP/MVVM</a>  </li>
<li><a href="http://www.cocoachina.com/ios/20170717/19884.html" target="_blank" rel="external">浅谈 MVC、MVP 和 MVVM 架构模式</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> 软件架构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MVC </tag>
            
            <tag> MVVM </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CocoaPod工作原理]]></title>
      <url>/2017/07/09/CocoaPod%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p><img src="/2017/07/09/CocoaPod工作原理/CocoaPod工作原理.png" alt="&quot;CocoaPod工作原理图解&quot;"><br><a id="more"></a></p>
]]></content>
      
        <categories>
            
            <category> 工具集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CocoaPod </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OC和Swift的单例模式]]></title>
      <url>/2017/07/06/OC%E5%92%8CSwift%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>单例模式是iOS开发中常用的设计模式，可以保证一个类只有一个对象实例。  </p>
<p>在Objective-C中单例常用的写法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Manager</span></span></div><div class="line">+ (<span class="keyword">instancetype</span>) shareManager &#123;</div><div class="line">    <span class="keyword">static</span> Manager* staticInstance = <span class="literal">nil</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        staticInstance = [[<span class="keyword">self</span> alloc] init];</div><div class="line">    &#125;) ;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> staticInstance;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>使用GCD中的dispatch_once_t可以保证里面的代码只被调用一次。  </p>
<p>在Swift 3.0 单例推荐写法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">let</span> shared = <span class="type">Manager</span>()</div><div class="line">    <span class="keyword">private</span> <span class="keyword">init</span>()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>static在Swift中表示 “类型范围作用域”，可以使用它来定义类型存储属性，类中的static属性拥有全局作用域和懒加载属性。<br>private关键字在Swift中表示“私有”。</p>
]]></content>
      
        <categories>
            
            <category> 设计模式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OC </tag>
            
            <tag> Swift </tag>
            
            <tag> 单例 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World,Goodbey HDU]]></title>
      <url>/2017/06/14/Hello-World-Goodby-HDU/</url>
      <content type="html"><![CDATA[<p><img src="/2017/06/14/Hello-World-Goodby-HDU/001.png" alt="&quot;我们毕业啦&quot;"><br><a id="more"></a><br>打算写这篇文章很久了，总在起笔时欲言又止，脑海晃过一个个画面，不知该从何说起。</p>
<p>不如，从头开始。  </p>
<p>我记得那是一个下雨的日子，江南常有的雨天，天真的少年就这样闯进了文一路的杭电。<br>也许大学是从梧桐树斑驳光影下的军训开始的，也许是从工字楼213五个人初见开始的，也许是从第一行C代码”Hello World”开始的。 </p>
<p>就在懵懵懂懂中开始了。</p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/003.png" alt="&quot;文一校区 梧桐树&quot;"></p>
<p>那时的东阳赌神还在炸金花，那时的柯桥富帅还没修学，那时的河北宗文帮我们搞定了很多代码，那时的河南蒲少爱上了页游。  </p>
<p>还有那个少年，他们叫他Hreo,他说他喜欢漫威里超级英雄Bumblebee。</p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/002.png" alt="&quot;赌神，你们为什么没有在一起？&quot;"> </p>
<p>大一。 </p>
<p>熙熙攘攘的社团，组团吃喝玩乐的文一路，度日如年的晚自习。<br>体育课上的太极十八式，马克思主义课上的小胖老师，点名考勤的红白卡。<br>学校对面重庆麻辣烫的阿姨，这一次葱蒜麻辣我都要。<br>沙县大酒店的蒸饺。<br>炸鸭腿饭的老板，加一瓶可乐。<br>还有到现在还不怎么会的C语言。 </p>
<p>你们都还在吗？</p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/004.png" alt="&quot;田北的支教时光&quot;"> </p>
<p>田北小学的孩子们，你们都长大了吗？</p>
<p>可那个少年还是一个孩子。</p>
<p>大二。</p>
<p>洋溢。<br>你好吗？<br>B支4依旧在文一和下沙之间穿梭。</p>
<p>人生是一场错过。</p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/006.png" alt="&quot;田北的支教时光&quot;"></p>
<p>西藏。<br>仓央嘉措和玛吉阿米的拉萨。</p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/009.png" alt="&quot;一个人需要隐藏多少秘密才能巧妙地度过一生&quot;"></p>
<p>曾虑多情损梵行，入山又恐别倾城。<br>世间安得双全法，不负如来不负卿。</p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/005.png" alt="&quot;纳木措&quot;"></p>
<p>大三。 </p>
<p>王大全老师，您的又大又全理论我想我能理解。<br>谢谢您带我领略软件工程的工程思维。<br>您的面壁蹲墙功我不会忘。<br>愿您，好好的。<br>相信师母，已变成了天使，从此没有忧伤。</p>
<p>实验室里的翔哥，耐心的讲解着OC代码。</p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/007.png" alt="&quot;回不去了&quot;"></p>
<p>WANG：你为什么要写iOS项目交作业。<br>ME：我就喜欢。<br>王老师我这回答你可满意？<br>从此走上了iOS Developer的不归路。  </p>
<p>美国。<br>纽约。波士顿。奥兰多。迈阿密。洛杉矶。</p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/010.png" alt="&quot;Key West, Florida&quot;"></p>
<p>大四。</p>
<p>代码。毕设。离别。实习。租房。Goodbey HDU。  </p>
<p>各奔东西的我们。<br>赌神回了东阳，混进了农行。<br>宗文放弃了读研，交了女朋友留在杭州写代码。<br>蒲少，还没来不得及问你志在何方。<br>富帅已经回来，最后一次见他，是在寝室打游戏。<br>Fight吧，少年们，用力活着用力爱哪怕肝脑涂地。      </p>
<p>还有。<br>敬爱青云书记，小胡子同学。<br>戴逗，涛哥，小董三人组。<br>耀卓，逗逗，鲜花。勇勇，奕廷。<br>离开计算机专业后的向宇，是否已经实现了你的梦想。<br>再见了，少年们，说了再见还会再见的吧。    </p>
<p><img src="/2017/06/14/Hello-World-Goodby-HDU/008.png" alt="&quot;都知欢聚最难得，难奈别离多&quot;"></p>
<p>那个少年。  </p>
<p>许多年前，有一双清澈的双眼。<br>想看遍这世界，去最遥远的远方。<br>感觉有双翅膀，能飞越高山和海洋。<br>爱上一个人，就不怕付出自己一生。<br>相信爱会永恒，相信每个陌生人。  </p>
<p>当我和世界初相见，当我曾经是少年。  </p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=26508186&auto=1&height=66"></iframe>
]]></content>
      
        <categories>
            
            <category> 所有的酒 都不如你 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> School </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
